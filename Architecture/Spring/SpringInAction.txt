------------------------------Spring实战------------------------------
-------------------------第一部分 Spring核心-------------------------
Spring主要特性：依赖注入、面向切面编程；
chapter 1介绍DI和AOP，如何解耦；
chapter 2装配Bean，基于XML配置Spring；
chapter 3最小化Spring XML配置；
chapter 4面向切面的Spring。
--------------------chapter 1 Spring之旅--------------------
Java使得以模块化方式构建复杂应用系统成为可能，为Applet而来，但为组件化而留。
JavaBean规范针对Java定义了软件组件模型，规定了一整套的编码策略，使简单的Java对象不仅可以重用，还可以轻松地构建更复杂的应用。最初为定义可重用的应用组件而设计，但却主要用作模型来构建用户界面窗口部件。
EJB 1.0把Java组件化设计延伸到服务器端，但与JavaBean无关。
Spring框架成为基于POJO的轻量级开发框架的领导者。
Spring是为了解决企业级应用开发的复杂性而创建的（简化Java开发），使用Spring可以让简单的JavaBean实现之前EJB才能完成的事情（事务支持、安全、分布式计算）。
Spring使用Bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须遵循JavaBean规范。
Spring采取的关键策略：
	1. 基于POJO的轻量级和最小侵入性编程；
	2. 通过依赖注入和面向接口实现松耦合；
	3. 基于切面和惯例进行声明式编程；
	4. 通过切面和模板减少样式代码。
****************************************
POJO
Plain Ordinary Java Object，简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。
它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类。
POJO实质上可以理解为简单的实体类，顾名思义POJO类的作用是方便程序员使用数据库中的数据表，对于广大的程序员，可以很方便的将POJO类当做对象来进行使用，当然也是可以方便的调用其get,set方法。
POJO与javabean的区别：
POJO普通Java类，具有一部分getter/setter方法的那种类就可以称作POJO，但是JavaBean则比 POJO复杂很多， Java Bean 是可复用的组件，对 Java Bean 并没有严格的规范，理论上讲，任何一个 Java 类都可以是一个 Bean 。
由于 Java Bean 是被容器所创建（如 Tomcat) 的，所以 Java Bean 应具有一个无参的构造器，另外，通常 Java Bean 还要实现 Serializable 接口用于实现 Bean 的持久性。 Java Bean 是不能被跨进程访问的。JavaBean是一种组件技术。
一般在web应用程序中建立一个数据库的映射对象时，我们只能称它为POJO。POJO(Plain Old Java Object)这个名字用来强调它是一个普通java对象，而不是一个特殊的对象，其主要用来指代那些没有遵从特定的Java对象模型、约定或框架（如EJB）的Java对象。
POJO是一个简单的普通的Java对象，它不包含业务逻辑或持久逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。
****************************************
****************************************
EJB
Enterprise JavaBean,是一个用来构筑企业级应用的服务器端可被管理组件，目标减轻原始代码的数量。
EJB容器可以接受三类EJB：
Session Beans
  Stateless Session Beans：是一类不包含状态信息的分布式对象，允许来自数个客户端的并发访问。由于不必控制与用户间的对话信息而减少了开销。
  Stateful Session Beans：包含状态的分布式对象，即是说，贯穿整个会话它们都要保有客户端信息。
Entity Beans：含有持久化状态的分布式对象。
Message Driven Beans：支持异步行为的分布式对象。
****************************************
1. 激发POJO的潜能
  EJB问题：谁为谁服务；
  Spring避免因自身的API弄乱应用代码，不会强迫你实现Spring规范的接口或继承规范的类。
2. 依赖注入
  高耦合：每个对象负责管理与自己相互协作的对象的引用。
  耦合具有两面性：一方面，紧密耦合代码难以测试，难以复用，难以理解；另一方面，一定耦合程度又是必须的。
  解决方法：依赖注入DI，对象的依赖关系将由负责协调系统中各个对象的第三方组件在创建对象时设定。
  构造器注入：通过构造器参数设置；
  装配：创建应用组件之间协作的行为。
  工作原理：Spring通过应用上下文装载Bean的定义并把它们组装起来，Spring应用上下文全权负责对象的创建和组装。
3. 应用切面
  AOP编程允许遍布应用各处的功能分离出来形成可重用的组件，促使应用程序分离关注点的一项技术。
  横切关注点：系统由许多不同组件组成，每个组件负责一块特定的功能，除实现自身核心功能外，还有额外职责，如日志、事务管理和安全经常融入自身核心业务逻辑中，这些就称为横切关注点。
  将关注点分散到多个组件中，会导致双重复杂性：
    遍布系统的关注点实现代码将会重复出现在多个组件中，改变这些关注点逻辑，必须修改各个模块的相关实现，即使将这些关注点抽象为独立的模块，方法的调用还是重复出现在各个模块。
    你的组件将会因为那些与自身核心业务无关的代码变得混乱。
  AOP将这些服务模块化，以声明的方式把它们应用到它们需要影响的组件中去。
  使用Spring的AOP配置的命名空间把Bean声明为一个切面，然后在<aop:aspect>中引用Bean，为了进一步定义，必须使用<aop:before>来声明在embarkOnQuest()方法执行前调用的方法->前置通知，<aop:after>后置通知。
  point-ref属性引用了embank切入点。
4. 使用模板消除样板式代码
  例如数据库JDBC连接操作，会产生大量重复的代码；
  使用Spring的SimpleJdbcTemplate，可以简化代码。
--------------------
二、容纳你的Bean
  容器是Spring框架的核心。Spring容器使用依赖注入管理构成应用的组件，它会创建相互协作的组件之间的关联。
  两种容器类型：
    Bean工厂，最简单的容器，提供基本的DI支持，org.springframework.beans.factory；
    应用上下文，基于BeanFactory之上构建，并提供面向应用的服务，org.springframework.context.ApplicationContext。
1. 使用应用上下文
  ClassPathXmlApplicationContext，从类路径下的XML配置文件中加载上下文定义，把应用上下文定义文件当作类资源；
  FileSystemXmlapplicationcontext，读取文件系统下的XML配置文件并加载上下文定义；
  XMLWebApplicationContext，读取Web应用下的XML配置文件并装载上下文定义。
  ClassPathXmlApplicationContext是在所有的类路径下查找xml文件。
  可以调用getBean()方法从Spring容器中获取Bean。
2. Bean的生命周期
  实例化 -> 填充属性 -> 调用BeanNameAware的setBeanName()方法 -> 调用BeanFactoryAware的setBeanFactory()方法 -> 调用ApplicationContextAware的setApplicationContext()方法 -> 调用BeanPostProcessors的预初始化方法 -> 调用InitializingBean()的afterPropertiesSet()方法 -> 调用定制的初始化方法 -> 调用BeanPostProcessors -> （Bean可以被使用） -> 容器关闭 -> 调用DisposableBean()的destroy()方法 -> 调用定制的销毁方法
  1. Spring对Bean进行实例化；
  2. Spring将值和Bean的引用注入进Bean对应的属性中；
  3. 如果Bean实现了BeanNameAware接口，Spring将Bean的ID传递给setBeanName()接口方法；
  4. 如果Bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()接口方法，将BeanFactory容器实例传入；
  5. 如果Bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()接口方法，将应用上下文的引用传入；
  6. 如果Bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessBeforeInitialization()接口方法；
  7. 如果Bean实现了InitializingBean接口，Spring将调用它们的afterPropertiesSet()接口方法。类似地，如果Bean使用init-method声明了初始化方法，该方法也会被调用；
  8. 如果Bean实现了BeanPostProcessor接口，Spring将调用它们的postPoressAfterInitialization()方法；
  9. Bean准备就绪，可以使用，将一直驻留在应用上下文，直到应用上下文被销毁；
  10. 如果Bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法，如果Bean使用destroy-method声明了销毁方法，该方法也会被调用。
--------------------
三、俯瞰Spring风景线
1. Spring模块
  A. Testing
    Test
  B. Core Spring container
    Beans, Core, Context, Expression, Context support
  C. AOP
    AOP, Aspects
  D. Instrumentation
    Instrument, Instrument Tomcat
  E. Data access & integration
    JDBC, OXM, Transaction, ORM, JMS
  F. Web and remoting
    Web, Servlet, Portlet, Struts
  核心Spring容器：最核心部分，负责Spring应用中的Bean的创建、配置和管理。所哟模块都构建在核心容器之上。
  AOP模块；
  数据访问与集成：Spring的JDBC和DAO封装了板式代码，ORM(object-relational mapping)支持，对Hibernate、Java Persisternce API、JDO和iBATIS集成，事务管理支持所有的ORM框架以及JDBC。
  Web和远程调用：两种形式：面向传统Web应用的Servlet的框架和面向Java Portlet API的基于Portlet的应用。
  测试：为JNDI、Servlet和Portlet编写单元测试。
2. Spring Portfolio
  Spring Portfolio包括多个构建于核心Spring框架之上的框架和类库，为几乎每个领域的Java的开发提供了Spring的编程模型。
  Spring Web Flow
    建立在Spring MVC框架之上并基于流程的会话式Web应用提供支持。
  Spring Web Service
    提供了契约优先的Web Service模型，服务的实现都是为了满足服务的契约而编写的。
  Spring Security
    利用Spring AOP，Spring Security为Spring应用提供了声明式的安全机制。
  Spring Integration
    提供几种通用的应用集成模式的Spring声明式风格的实现。
  Spring Batch
    面向POJO的编程模型使用Spring Batch实现。
  Spring Social
    社交模块。
  Spring Mobile
    Spring Android。
  Spring Dynamic Modules
    整合了Spring的声明式依赖注入和OSGi的动态组件模型。
  Spring LDAP
    创建基于模板的抽象层来封装多余的复杂操作。
  Spring Rich Client
    Swing。
  Spring .NET
  Spring-Flex
  Spring Roo
  Spring Extensions
--------------------
四、Spring新功能
  Spring 3.0
    Spring MVC全面支持Rest；
    新的表达式语言；
    Spring MVC新的注解，@CookieValue和@RequestHeader；
    新的XML命名空间，减少Spring MVC配置；
    通过注解驱动声明异步和调度方法。

--------------------chapter 2 装配Bean--------------------
装配：创建应用对象之间协作关系的行为。
--------------------
一、声明Bean
1. 创建Spring配置
 Spring容器两种配置Bean方式：使用一个或多个XML文件作为配置文件；基于Java注解的配置方式。
 XML文件配置：
   <beans>
   </beans>
   在<beans>元素内，可以放置Spring配置信息，包括<bean>声明。
---------------Spring命名空间---------------
aop	为声明切面以及将@AspectJ注解的类代理为Spring切面提供了配置元素
beans	支持声明Bean和装配Bean，是Spring最核心也是最原始的命名空间
context	为配置Spring应用上下文提供了配置元素，包括自动检测和自动装配Bean、注入非Spring直接管理的对象
jee	提供了与Java EE API的集成，例如JNDI和EJB
jms	为声明消息驱动的POJO提供了配置元素
lang	支持配置Groovy、JRuby或BeanShell等脚本实现的Bean
mvc	启用Spring MVC的能力，例如面向注释的控制器、视图控制器和拦截器
oxm	支持Spring的对象到XML映射配置
tx	提供声明式事务配置
util	提供各种各样的工具类元素，包括把集合配置为Bean、支持属性占位符元素
-------------------------------------------
2. 声明一个简单的Bean
----------------------------------------
  <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">
    <bean id="duke" class="com.whut.Juggler"/>
</beans>
----------------------------------------
相当于new com.whut.Juggler();创建一个对象，注意这里的schemaLocation，应该和spring-beans.jar中保持一致。
3. 通过构造器注入
----------------------------------------
  <bean id="duke" class="com.whut.Juggler">
    <constructor-arg value="15" />
  </bean>
----------------------------------------
  通过构造器注入对象引用
----------------------------------------
<bean id="sonnet29" class="com.whut.Sonnet29" />
<bean id="poeticDuke" class="com.whut.PoetJuggler"
  <constructor-arg value="15"/>
  <constructor-arg ref="sonnet29"/>
</bean>
----------------------------------------
    ref属性传递Bean引用。
  通过工厂方法创建Bean
----------------------------------------
public class stage{
  private Stage(){
  }
  private static class StageSingletonHolder{
    static Stage instance = new Stage();
  }
  public static Stage getInstance(){
    return StageSingletonHolder.instance;
  }
}
<bean id="theStage" class="com.whut.Stage"
  factory-method="getInstance"/>
----------------------------------------
4. Bean的作用域
  所有Spring Bean默认是单例，仅限于Spring上下文的范围内。
----------------------------------------
singleton	在每个Spring容器中，一个Bean定义只有一个对象实例
prototype	允许Bean的定义可以被实例化任意次
request		在一次HTTP请求中，每个Bean定义对应一个实例，该作用域仅在基于Web的Spring上下文中才有效
session		在一个HTTP Session中，每个Bean定义对应一个实例，该作用域仅在基于Web的Spring上下文中才有效
global-session	在一个全局HTTP Session中，每个Bean定义对应一个实例，该作用域仅在Portlet上下文中才有效
----------------------------------------
5. 初始化和销毁Bean
  初始化init-method
  销毁destroy-method
----------------------------------------
<bean id="auditor" class="com.whut.Auditor"
  init-method="turnOnLights"
  destory-method="turnOffLights"/>
----------------------------------------
  另一种让Bean实现Spring的InitializingBean和DisposableBean接口，InitializingBean声明一个afterPropertiesSet()方法作为初始化方法，DisposableBean声明一个destroy()方法，在Bean从应用上下文移除时被调用，优点：Spring自动检测实现了这些接口的Bean，无需额外配置；缺点：Bean与Spring的API产生了耦合。
  默认的init-method和destroy-method
    <beans default-init-method="" default-destroy-method=""></beans>
--------------------
二、注入Bean属性
  以setter方式注入。
  1. 注入简单值
    <bean id="" class="">
      <property name="" value=""/>
    </bean>
    设置数字和String并没有什么不同。
  2. 引用其他Bean
    <property name="" ref=""/>
    注入内部Bean(inner bean)
      <bean id="" class="">
        <property name=">
	  <bean class="">
	</property>
      </bean>
      每个bean拥有独立唯一属于自己的内部bean。
      内部Bean不仅限于setter注入，可以构造方法注入；
        <bean id="" class="">
	  <constructor-arg value=""/>
	  <constructor-arg>
	    <bean class=""/>
	  </constructor-arg>
	</bean>
      内部Bean没有ID属性，因此缺点：不能复用，内部Bean仅限于一次注入，而且不能被其他Bean所引用。
  3. 使用Spring的命名空间p装配属性
    <beans xmlns:p="http://www.springframework.org/schema/p">
    <bean id="" class=""
      p:song=""
      p:instrument-ref=""/>
  4. 装配集合
    <list>	装配list类型的值，允许重复
    <set>	装配set的值，不允许重复
    <map>	装配map类型的值，名称和值可以是任意类型
    <props>	装配properties的值，名称和值必须是String
    装配数组或者java.util.Collection，<list>和<set>；
    装配java.util和java.util.Properties，<map>和<props>；
    如装配Collection<Instrument> instrument;
      <bean id="hank" class="">
        <property name="instruments">
	  <list>
	    <ref bean="guitar">
	    <ref bean="cymbal">
	    <ref bean="harmonica">
	  </list>
	</property>
      </bean>
    这里<ref>用来定义Spring上下文中的其他Bean引用，还可以使用<value>、<bean>和<null/>，可以包含另一个<list>形成多维列表。可以使用<set>配置java.util.List。
    装配Map集合
      Map<String,Instrument> instrument;
      <bean id="" class="">
        <property name="">
	  <map>
	    <entry key="" value-ref="">
	  </map>
	</property>
      </bean>
      <key>	指定键为String
      <key-ref>	为Spring上下文引用
      <value>	值为String
      <value-ref> 值为Spring上下文引用
      当键和值都不是String类型时，唯一方法使用<map>元素。
      装配Properties集合
        当Map的每个entry的键和值都为String类型时，可以考虑使用java.util.Properties代替Map。
	Properties instruments;
	<bean id="" class="">
	  <property name="instrument">
	    <props>
	      <prop key="GUITAR">Strum</prop>
	    </props>
	  </property>
	</bean>
        <property>元素用于把值或Bean引用注入Bean的属性中；
	<props>用于定义一个java.util.Properties类型的集合值；
	<prop>用于定义一个<props>集合的一个成员。
  5. 装配空值
    <property name=""><null/></property>
--------------------
三、使用表达式装配
  Spring表达式语言(Spring Expression Language, SpEL)，特性：
    使用Bean的ID来引用Bean
    调用方法和访问对象的属性
    对值进行算术、关系和逻辑运算
    正则表达式匹配
    集合操作
  1. SpEL的基本原理
    字面值
      #{}界定符装配
      <property name="" value="#{5}"/>
      <property name="" value="#{1e4}"/>
      代表10000.0
      String可以使用单引号或双引号
      <property name="" value="#{'chunk'}"/>
    引用Bean、Properties和方法
      <property name="" value="#{saxophone}"/>
      将ID为sacophone的Bean装配；
      <bean id="carl" class="">
        <property name="song" value="#{kenny.song}"/>
      </bean>
      <property name="song" value="#{kenny.selectSong().toUpperCase()}"/>
      若为空，SpEL会抛出空指针异常，解决方法：使用null-safe存取器
        <property name="song" value="#{song.selectSong()?.toUpperCase()}"/>
    操作类
      T()会调用类作用域的方法和常量；
      <property name="pi" value="#{T(java.lang.Math).PI}"/>
      <property name="random" value="#{T(java.lang.Math).random()"}/>
  2. 在SpEL值上执行操作
    数值运算
      Java的所有基础算符运算符，^表示乘方；
    比较值
      等于	eq
      小于	lt
      小于等于	le
      大于	gt
      大于等于	ge
    逻辑表达式
      and、or、not或!
    条件表达式
      ?:为elvis
      <property name=""
        value="#{kenny.song != null ? kenny.song:'Green'}"/>
      <property name="" value="#{kenny.song?:'Green'}"/>
    正则表达式
      <property name="validEamil" value="#{admin.email matches '[]}"/>
  3. 在SpEL中筛选集合
    public class City{
      private String name;
      private String state;
      private int population;
      //setter and getter
    }
    <util:list id="cities">
      <bean class="com.City"
        p:name="Chi" p:state="IL" p:population="1234"/>
      <bean class="com.City"
        p:name="New" p:state="TX" p:population="3214"/>
    </util:list>
    创建了java.util.List
    访问集合成员
      <property name="chose" value="#{cities[2]}"/>
    <util:properties id="settings"
      location="classpath:setting.properties"/>
      加载了名为settings.properties的文件
    两种特殊的选择属性的方式：systemEnvironment和systemProperties
    查询集合成员
      <property name="bigCities" value="#{cities.?[population gt 10000]}"/>
      .?[]查询
      .^[]查询第一个匹配
      .$[]查询最后一个匹配
    投影集合
      .![]从集合的每一个成员中选择特定的属性放入一个新的集合中
      <property name="cityName"
        value="#{cities.?[population gt 10000].![name + "," + state]}"/>
--------------------
四、小结
  Spring容器是核心，BeanFactory是最简单的容器，提供基础的依赖注入和Bean装配服务，更高级可以ApplicationContext；
  Spring容器装配Bean的方式XML文件、自动装配和注解。

--------------------chapter 3 最小化Spring XML配置--------------------
自动装配（autowiring）：有助于减少甚至消除配置<property>和<constructor-arg>，让Spring自动识别如何装配Bean的依赖关系；
自动检测（autodiscovery）：比上者更近一步，让Spring能够自动识别哪些类需要被配置为Spring Bean，减少对<bean>的使用。
--------------------
一、自动装配Bean属性
  1. 4种类型的自动装配
    byName
      把与Bean的属性具有相同名字或者ID的其他Bean自动装配到Bean的对应属性中，如果没有，不装配。
    byType
      把与Bean的属性具有相同类型的其他Bean自动装配到Bean的对应属性中，如果没有跟属性的类型相匹配的Bean，则不被装配。
    constructor
      把与Bean的构造器入参具有相同类型的其他Bean自动装配到Bean构造器的对应入参中。
    autodetect
      首先尝试constructor进行自动装配，如果失败，再尝试使用byType进行自动装配。
    byName自动装配
      <bean id="instrument" class=""/>
      <bean id="kenny" class="" autowire="byName">
        <property name="song" value="Hello"/>
	<!--这里intrument同名，可以直接装配-->
      </bean>
      为属性自动装配ID与该属性的名字相同的Bean，通过设置autowire为byName，寻找与其属性名字相同的Spring Bean，这里instrument使用setter进行注入；
      缺点：需要假设Bean的名字与其他Bean的属性的名字一样。
    byType自动装配
      Spring会寻找哪一个Bean的类型与属性的类型相匹配。
      局限性：如果找到多个，会抛出异常；解决方法：
        标识一个首选Bean：primary属性为true（默认为true）；
	排除某些Bean，autowire-candidate为false。
    constructor自动装配
      new一个新的，如果一个类有多个构造器，它们都满足自动装配，不会尝试；
    最佳自动装配
      autodetect
      首先尝试constructor，再尝试byType。
  2. 默认自动装配
    <beans default-autowire="byType">
    </beans>
    默认情况为none，Spring配置文件中所有Bean，但不是Spring应用上下文的所有Bean，可以在应用上下文定义多个配置文件。
  3. 混合使用自动装配和显示装配
    自动装配，仍可以显示装配；
    当使用constructor自动装配时，必须让Spring自动装配构造器所有的入参，不能混合使用contructor和<constructor-arg>。
--------------------
二、使用注解装配
Spring默认禁用注解装配，可以使用<context:annotation-config>启用。
自动装配注解：
  Spring自带的@Autowired注解；
  JSR-330的@Inject注解；
  JSR-250的@Resource注解。
  1. 使用@Autowired
    希望使用@Autowired装配，可以使用setter，在setter方法上使用；
    标注setter、需要Bean引用的任意方法、构造器；
    setter使用byType匹配，构造器表示当创建Bean时，及时没有<constructot-arg>也需要自动装配；
    @Autowired可以直接标注属性，并删除setter方法；
    两种阻碍工作情景：
      应用中必须只能有一个Bean适合装配到@Autowired注解所标注的属性或参数中；
      如果没有匹配的Bean或者存在多个匹配的Bean，会出错。
    可选的自动装配
      属性不一定非要装配，null值也是可以接受的。使用：
        @Autowired(required=false)
      尝试装配该属性，但是如果没有查找到与之匹配的类型，就会设置为null；
      但是当使用构造器装配，只有一个构造器可以将@Autowired的required属性设置为true，其他只能为false，使用@Autowired标注多个构造器，Spring会从所有满足条件的构造器选择入参最多的那个。
    限制歧义性的依赖
      @Qualifier配合判断哪一个Bean才是需要的。缩小匹配范围。
      @Autowired
      @Aualifier("guitar")
      private Instrument instrument;
      也可以
      <bean class="">
        <qualifier value="stringed"/>
      </bean>
      还可以
      @Qualifier("stringed")
      public class Guitar implements Instrument{}
    创建自定义的限定器（Qualifier）
      @Target()
      @Retention(RetentionPolicy.RUNTIME)
      @Qualifier
      public @interface StringedInstrument{
      }
      可以使用@StringedInstrument对自动装配的instrument进行限定；
      @Autowired
      @StringedInstrument
      private Instrument instrument;
      当装配instrument，Spring回答所有可选择的Bean缩小到只有@StringedInstrument注解所标注的Bean。
      如果使用@StringedInstrument注解的Bean有多个，需要进一步缩小范围，可以定义另一种注解@Strummed。
--------------------
      @Target({ElementType.FIELD,ElementType.PARAMETER,ElementType.TYPE})
      @Retention(RstentionPolicy.RUNTIME)
      @Qualifier
      public @interface Strummed{}

      @Autowired
      @StringedInstrument
      @Strummed
      private Instrument instrument;
--------------------
      Spring的@Autowired注解是减少Spring XML注解的一种方式，但是使用它的类会引入对Spring的特定依赖，解决方法：@Inject。
--------------------
  2. 借助@Inject实现基于标准的自动装配
    编程模型：JSR-330或at inject，通用依赖注入模型。
    @Inject是JSR-330的核心部件，几乎可以完全替代@Autowired注解。
    @Inject可以用来自动装配属性、方法、构造器，但是没有required属性，因此它的注解标注的依赖关系必须存在，如果不存在抛出异常。
    JSR-330另一种技巧：注入一个Provider，Provider接口可以实现Bean引用的延迟注入以及注入Bean的多个实例。
    ---------------
    //Knife Bean作用域声明prototype
    private Set<Knife> knives;
    @Inject
    public KnifeJuggler(Provicer<Knife> knifeProvider){
      knives = new HashSet<Knife>();
      for (int i = 0; i < 5; i++) {
        knives.add(knifeProvider.get());
      }
    }
    ---------------
    限定@Inject所标注的属性
      @Inject所对应为@Name注解，类似于Spring的@Qualifier。
      @Inject
      @Name("guitar")
      private Instrument instrument;
      @Qualifier缩小匹配Bean选择范围，@Name通过Bean的ID标识可选择Bean。
    创建自定义的JSR-330 Qualifier
      JSR-330有自己的@Qualifier注解，但是不建议使用，可以使用创建自定义限定器注解。
      ---------------
      //这里import的是javax.inject.Qualifier而非Spring中的
      @Target({ElementType.FIELD,ElementType.PARAMETER,ElementType.TYPE})
      @Retention(RstentionPolicy.RUNTIME)
      @Qualifier
      public @interface StringedInstrument{}
      ---------------
--------------------
  3. 在注解注入中使用表达式
    @Value可以注解装配String类型的值和基本类型的值。
    可以使用@Value直接标注某个属性、方法或者方法参数。
    搭配SpEL：
    @Value("#{systemProties.myFavoriteSong}")
    private String song;
------------------------------
三、自动检测Bean
<context:annotation-config>特殊对待注解，有助于完全消除<property>和<consructor-arg>，但仍需要使用<bean>显式定义Bean。
<context:component-scan>除了完成与<context:annotation-config>一样的工作，允许Spring自动检测Bean和定义Bean。
<context:component-scan>元素会自动扫描指定的包及其所有子包，并查找出能够自动注册为Spring Bean类。base-package标识了<context:component-scan>元素所扫描的包。
---------------
1. 为自动检测标注Bean
  默认情况下，<context:component-scan>查找使用构造型（stereotype）注解所标注的类，特殊注解如下：
    @Component 通用的构造型注解，标识该类为Spring组件
    @Controller 标识将该类定义为Spring MVC controller
    @Repository 标识将该类定义为数据仓库
    @Service 标识将该类定义为服务
    使用@Component标注的任意自定义注解
  使用@Component注解标注
    @Component
    public class Guitar implements Instrument {
      public void play(){
        //...
      }
    }
  Spring扫描com.springinaction.springidol包时，会发现@Component注解所标注的Guitar，并自动注册为Spring Bean。
---------------
2. 过滤组件扫描
  <context:component-scan>可以配置<context:include-filter>和/或者<context:exclude-filter>子元素，调整扫描行为。
  <context:component-scan>自动注册所有实现Instrument接口的类：
    <context:component-scan
      base-package="com.springinaction.springidol">
      <context:include-filter type="assignable"
        expression="com.springinaction.springidol.Instrument"/>
    </context:component-scan>
    五种过滤器类型：
    annotation	过滤器扫描使用指定注解所标注的那些类，通过expression属性指定要扫描的注解
    assignable	扫描派生于expression属性所指定类型的那些类
    aspectj	扫描与expression属性所指定的AspectJ表达式所匹配的那些类
    custom	使用自定义的org.springframework.core.type.TypeFilter实现类，该类由expression属性指定
    regex	过滤器扫描类的名称与expression属性所指定的正则表达式所匹配的那些类
--------------------
四、使用Spring基于Java的配置
基于Java拥有一些XML所不具有的技巧。
---------------
1. 创建基于Java的配置
  仍需要使用XML启动Java配置。
---------------
2. 定义一个配置类
  使用@Configuration注解Java类，相当于XML的<beans>元素。
---------------
3. 定义一个简单的Bean
  @Bean相当于<bean>，返回一个对象，在XML中，Bean的类型和ID都是由String属性来标识，String标识符缺点：无法编译时检查；
  但是基于Java配置，没有String属性，Bean的ID和类型都被视为方法签名的一部分，Bean的实际创建是在方法体中定义的，所以编译期可以检查Bean的类型是合法类型，并且Bean的ID是唯一的。
---------------
4. 使用Spring的基于Java的配置进行注入
  实现依赖注入一个值，直接把数字传入构造器中：
    @Bean
    public Performer duke(){
      return new Jugler(15);
    }
  setter注入
    @Bean
    public Perform kenny(){
      Instrumentalist kenny = new Instrumentalist();
      kenny.setSong("Jingle Bells");
      return kenny;
    }
  装配另一个Bean的引用
    @Bean
    private Poem sonnet29(){
      return new Sonnet29();
    }
    @Bean
    public Performer poeticDuke(){
      return new PoeticJuggler(sonnet29());
    }
    通过声明方法引用Bean并不等同于调用该方法，会告知Spring将方法注册进Spring的应用上下文，当引用时，会拦截方法，尝试上下文查找该Bean。
--------------------
五、小结
  Spring的XML冗长是缺点，提供消除Xml配置的方式：
    使用自动装配代替<property>和<constructor-arg>
    组件检测自动处理整个<bean>
    使用Java代替Spring配置
--------------------chapter 4 面向切面的Spring--------------------
横切关注点：分布于应用中多处功能。
将横切关注点与业务逻辑相分离是AOP所解决的。
AOP可以实现横切关注点与它们所影响的对象之间的解耦。
--------------------
一、什么是面向切面编程
  如果在整个应用中使用相同的基类，继承往往会导致一个脆弱的对象体系；而使用委托可能需要对委托对象进行复杂的调用。
  横切关注点可以被模块化为一个特殊的类，成为切面。这样优点：每个关注点现在只集中于一处，而不是分散到多处代码中；其次，服务模块更简洁，因为它们只包含主要关注点的代码，而次要关注点的代码被转移到切面中了。
1. 定义AOP术语
  A. 通知（Advice）
    切面的工作被称为通知，通知定义了切面什么以及何时使用，除了描述切面要完成的工作，通知还解决了何时执行这个工作的问题。
    Before		在方法被调用前调用通知
    After		在方法完成之后调用通知，无论方法执行是否成功
    After-returning	在方法成功执行之后调用通知
    After-throwing	在方法抛出异常后调用通知
    Around		通知包裹了被通知的方法，在被通知的方法调用之前和调用之后定义自定义的行为
  B. 连接点（Joinpoint）
    连接点是在应用执行过程中能够插入切面的一个点，这个点可以是调用方法时、抛出异常时、修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。如电力公司的电表。
  C. 切点（Pointcut）
    一个切面并不需要通知应用的所有连接点，切点有助于缩小切面所通知连接点的范围。
    如果通知定义了切面的“什么”和“何时”，那么切点就定义了“何处”，切点的定义会匹配通知所要织入的一个或多个连接点。通常使用明确的类和方法名称来指定这些切点，或是利用正则表达式定义匹配的类和方法名称模式来指定这些切点。可以动态创建，运行时决策。
  D. 切面（Aspect）
    抄表员需要知道完成工作所需要的一切东西。
    切面是通知和切点的结合，通知和切点共同定义了关于切面的全部内容——它是什么，在何时和何处完成其功能。
  E. 引入（Introduction）
    引入允许我们向现有的类添加新方法或属性。使用一个类记录状态，可以在无需修改这些现有类的情况下让它们具有新的行为和状态。
  F. 织入（Weaving）
    织入是将切面应用到目标对象来创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中，在目标对象的声明周期有多个点可以进行织入。
    编译期：切面在目标类编译时被织入，AspectJ的织入编译器，需要特殊编译器。
    类加载期：切面在目标类加载到JVM时被织入。特殊类加载器。
    运行期：切面在应用运行的某个时刻被织入，AOP容器会为目标对象动态创建一个代理对象。
  连接点是在程序执行过程中，能够应用通知的所有点，切点定义了通知被应用的所在位置。
--------------------
2. Spring对AOP的支持
  AOP框架：
    AspectJ
    JBoss AOP
    Spring AOP
  Spring的4个AOP支持：
    基于代理的经典AOP
    @AspectJ注解驱动的切面
    纯POJO切面
    注入式AspectJ切面
  前三个都是Spring给予代理的AOP变体，Spring对AOP的支持局限于方法拦截；
  若不是方法拦截，而是构造器或属性拦截，使用DI把Spring Bean注入到AspectJ切面。
  1. Spring通知是Java编写的
    可以使用IDE开发切面，定义通知所应用的切面通常在Spring配置文件里采用XML来编写。
    AspectJ相反，虽然现在支持注解，但最初是Java扩展的方式实现。
  2. Spring在运行期通知对象
    代理类包裹切面，Spring运行期将切面织入Spring管理的Bean。
    代理类封装了目标类，拦截被通知的方法的调用，再讲调用转发给真正的目标。
    拦截到方法调用时，调用目标Bean之前，代理会执行切面逻辑，直到应用需要代理的Bean才创建代理对象，若使用的是ApplicationContext，在上下文从BeanFactory加载所有Bean时，Spring创建被代理的对象，因为Spring运行时才创建代理对象，所以不需要特殊的编译器。
  3. Spring只支持方法连接点
    因为基于动态代理，所以只支持方法连接点。
--------------------
2. 使用切点选择连接点
  切点用于准确定位应该什么地方应用切面的通知，切点和通知是切面的最基本元素。
  AspectJ切点表达式语言：
  arg() 限制连接点匹配参数为指定类型的执行方法
  @args() 限制参数由指定注解标注的执行方法
  execution() 用于匹配是连接点的执行方法
  this() 限制连接点匹配AOP代理的Bean引用为指定类型的类
  target() 限制匹配目标对象为指定类型的类
  @target() 限制匹配特定的执行对象，这些对象对应的类要具备指定类型的注解
  within() 限制连接点匹配指定的类型
  @within() 限制匹配指定注解所标注的类型
  @annotation限制匹配带有指定注解连接点
  只有execution指示器是唯一的执行匹配，也是主要指示器，其他都是限制匹配。
  1. 编写切点
  execution(* com.springinaction.springidol.Instrument.play(..))
  execution在执行时触发
  *返回任意类型
  方法所属的类型
  (..)使用任意参数
  仅匹配springidol包
  execution(* com.springinaction.springidol.Instrument.play())
  	      && within(com.springinaction.springidol.*)
  当在com.springinaction.springidol包下的任意类的方法被调用时
  可以使用and代替&&
  2. 使用Spring的bean()指示器
  该指示器允许我们在切点表达式中使用Bean的ID来标识Bean，它的功能是使用Bean ID或Bean名称作为参数来限制切点只匹配特定的Bean。
  execution(* com.springinaction.springidol.Instrument.play())
  	      and bean(eddie)
  这里设置Instrument的play()方法应用通知，限定Bean ID为eddie。
--------------------
4.3 在XML中声明切面
  经典AOP模型ProxyFactoryBean
  基于POJO切面的声明：
  <aop:advisor> 定义AOP通知器
  <aop:after> 定义AOP后置通知（不管是否执行成功）
  <aop:after-returing> 定义AOP after-returning
  <aop:after-throwing> 定义after-throwing通知
  <aop:around> 定义AOP环绕通知
  <aop:aspect> 定义切面
  <aop:aspect-autoproxy> 启用@AspectJ注解驱动的切面
  <aop:before> 定义AOP前置通知
  <aop:config> 顶层的AOP配置元素
  <aop:declare-parents> 为被通知对象引入额外的接口，并透明地实现
  <aop:pointcut> 定义切点
--------------------
public class Audience{
  public void takeSeats(){}//表演之前
  public void turnOffCellPhones(){}//表演之前
  public void applaud(){}//表演之后
  public void demandRefund(){}//表演失败之后
}
<bean id="audience" class="com.Audience">
--------------------
1. 声明前置和后置通知
--------------------
<aop:config>
  <aop:aspect ref="audience">
    <aop:before pointcut="execution(* com.Audience.Perfoemer.perform(..))" method="takeSeats"/>
  </aop:aspect>
</aop:config>
--------------------
  注意：
    1. 大多数AOP配置元素必须在<aop:config>的上下文使用；
    2. <aop:config>可以声明一个或多个通知器、切面或切点；
    为了避免重复定义切点，使用<aop:pointcut>定义切点。
    <aop:pointcut id="performance" expression="execution(* com.Audience.Perfoemer.perform(..))"/>
    <aop:before pointcut-ref="performance" method="takeSeats"/>
2. 声明环绕通知
  如要统计前置到后置的时间。
  
