------------------------------Spring实战------------------------------
-------------------------第一部分 Spring核心-------------------------
Spring主要特性：依赖注入、面向切面编程；
chapter 1介绍DI和AOP，如何解耦；
chapter 2装配Bean，基于XML配置Spring；
chapter 3最小化Spring XML配置；
chapter 4面向切面的Spring。
--------------------chapter 1 Spring之旅--------------------
Java使得以模块化方式构建复杂应用系统成为可能，为Applet而来，但为组件化而留。
JavaBean规范针对Java定义了软件组件模型，规定了一整套的编码策略，使简单的Java对象不仅可以重用，还可以轻松地构建更复杂的应用。最初为定义可重用的应用组件而设计，但却主要用作模型来构建用户界面窗口部件。
EJB 1.0把Java组件化设计延伸到服务器端，但与JavaBean无关。
Spring框架成为基于POJO的轻量级开发框架的领导者。
Spring是为了解决企业级应用开发的复杂性而创建的（简化Java开发），使用Spring可以让简单的JavaBean实现之前EJB才能完成的事情（事务支持、安全、分布式计算）。
Spring使用Bean或者JavaBean来表示应用组件，但并不意味着Spring组件必须遵循JavaBean规范。
Spring采取的关键策略：
	1. 基于POJO的轻量级和最小侵入性编程；
	2. 通过依赖注入和面向接口实现松耦合；
	3. 基于切面和惯例进行声明式编程；
	4. 通过切面和模板减少样式代码。
****************************************
POJO
Plain Ordinary Java Object，简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。
它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类。
POJO实质上可以理解为简单的实体类，顾名思义POJO类的作用是方便程序员使用数据库中的数据表，对于广大的程序员，可以很方便的将POJO类当做对象来进行使用，当然也是可以方便的调用其get,set方法。
POJO与javabean的区别：
POJO普通Java类，具有一部分getter/setter方法的那种类就可以称作POJO，但是JavaBean则比 POJO复杂很多， Java Bean 是可复用的组件，对 Java Bean 并没有严格的规范，理论上讲，任何一个 Java 类都可以是一个 Bean 。
由于 Java Bean 是被容器所创建（如 Tomcat) 的，所以 Java Bean 应具有一个无参的构造器，另外，通常 Java Bean 还要实现 Serializable 接口用于实现 Bean 的持久性。 Java Bean 是不能被跨进程访问的。JavaBean是一种组件技术。
一般在web应用程序中建立一个数据库的映射对象时，我们只能称它为POJO。POJO(Plain Old Java Object)这个名字用来强调它是一个普通java对象，而不是一个特殊的对象，其主要用来指代那些没有遵从特定的Java对象模型、约定或框架（如EJB）的Java对象。
POJO是一个简单的普通的Java对象，它不包含业务逻辑或持久逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。
****************************************
****************************************
EJB
Enterprise JavaBean,是一个用来构筑企业级应用的服务器端可被管理组件，目标减轻原始代码的数量。
EJB容器可以接受三类EJB：
Session Beans
  Stateless Session Beans：是一类不包含状态信息的分布式对象，允许来自数个客户端的并发访问。由于不必控制与用户间的对话信息而减少了开销。
  Stateful Session Beans：包含状态的分布式对象，即是说，贯穿整个会话它们都要保有客户端信息。
Entity Beans：含有持久化状态的分布式对象。
Message Driven Beans：支持异步行为的分布式对象。
****************************************
1. 激发POJO的潜能
  EJB问题：谁为谁服务；
  Spring避免因自身的API弄乱应用代码，不会强迫你实现Spring规范的接口或继承规范的类。
2. 依赖注入
  高耦合：每个对象负责管理与自己相互协作的对象的引用。
  耦合具有两面性：一方面，紧密耦合代码难以测试，难以复用，难以理解；另一方面，一定耦合程度又是必须的。
  解决方法：依赖注入DI，对象的依赖关系将由负责协调系统中各个对象的第三方组件在创建对象时设定。
  构造器注入：通过构造器参数设置；
  装配：创建应用组件之间协作的行为。
  工作原理：Spring通过应用上下文装载Bean的定义并把它们组装起来，Spring应用上下文全权负责对象的创建和组装。
3. 应用切面
  AOP编程允许遍布应用各处的功能分离出来形成可重用的组件，促使应用程序分离关注点的一项技术。
  横切关注点：系统由许多不同组件组成，每个组件负责一块特定的功能，除实现自身核心功能外，还有额外职责，如日志、事务管理和安全经常融入自身核心业务逻辑中，这些就称为横切关注点。
  将关注点分散到多个组件中，会导致双重复杂性：
    遍布系统的关注点实现代码将会重复出现在多个组件中，改变这些关注点逻辑，必须修改各个模块的相关实现，即使将这些关注点抽象为独立的模块，方法的调用还是重复出现在各个模块。
    你的组件将会因为那些与自身核心业务无关的代码变得混乱。
  AOP将这些服务模块化，以声明的方式把它们应用到它们需要影响的组件中去。
  使用Spring的AOP配置的命名空间把Bean声明为一个切面，然后在<aop:aspect>中引用Bean，为了进一步定义，必须使用<aop:before>来声明在embarkOnQuest()方法执行前调用的方法->前置通知，<aop:after>后置通知。
  point-ref属性引用了embank切入点。
4. 使用模板消除样板式代码
  例如数据库JDBC连接操作，会产生大量重复的代码；
  使用Spring的SimpleJdbcTemplate，可以简化代码。
--------------------
二、容纳你的Bean
  容器是Spring框架的核心。Spring容器使用依赖注入管理构成应用的组件，它会创建相互协作的组件之间的关联。
  两种容器类型：
    Bean工厂，最简单的容器，提供基本的DI支持，org.springframework.beans.factory；
    应用上下文，基于BeanFactory之上构建，并提供面向应用的服务，org.springframework.context.ApplicationContext。
1. 使用应用上下文
  ClassPathXmlApplicationContext，从类路径下的XML配置文件中加载上下文定义，把应用上下文定义文件当作类资源；
  FileSystemXmlapplicationcontext，读取文件系统下的XML配置文件并加载上下文定义；
  XMLWebApplicationContext，读取Web应用下的XML配置文件并装载上下文定义。
  ClassPathXmlApplicationContext是在所有的类路径下查找xml文件。
  可以调用getBean()方法从Spring容器中获取Bean。
2. Bean的生命周期
  实例化 -> 填充属性 -> 调用BeanNameAware的setBeanName()方法 -> 调用BeanFactoryAware的setBeanFactory()方法 -> 调用ApplicationContextAware的setApplicationContext()方法 -> 调用BeanPostProcessors的预初始化方法 -> 调用InitializingBean()的afterPropertiesSet()方法 -> 调用定制的初始化方法 -> 调用BeanPostProcessors -> （Bean可以被使用） -> 容器关闭 -> 调用DisposableBean()的destroy()方法 -> 调用定制的销毁方法
  1. Spring对Bean进行实例化；
  2. Spring将值和Bean的引用注入进Bean对应的属性中；
  3. 如果Bean实现了BeanNameAware接口，Spring将Bean的ID传递给setBeanName()接口方法；
  4. 如果Bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()接口方法，将BeanFactory容器实例传入；
  5. 如果Bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()接口方法，将应用上下文的引用传入；
  6. 如果Bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessBeforeInitialization()接口方法；
  7. 如果Bean实现了InitializingBean接口，Spring将调用它们的afterPropertiesSet()接口方法。类似地，如果Bean使用init-method声明了初始化方法，该方法也会被调用；
  8. 如果Bean实现了BeanPostProcessor接口，Spring将调用它们的postPoressAfterInitialization()方法；
  9. Bean准备就绪，可以使用，将一直驻留在应用上下文，直到应用上下文被销毁；
  10. 如果Bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法，如果Bean使用destroy-method声明了销毁方法，该方法也会被调用。
--------------------
三、俯瞰Spring风景线
1. Spring模块
  A. Testing
    Test
  B. Core Spring container
    Beans, Core, Context, Expression, Context support
  C. AOP
    AOP, Aspects
  D. Instrumentation
    Instrument, Instrument Tomcat
  E. Data access & integration
    JDBC, OXM, Transaction, ORM, JMS
  F. Web and remoting
    Web, Servlet, Portlet, Struts
  核心Spring容器：最核心部分，负责Spring应用中的Bean的创建、配置和管理。所哟模块都构建在核心容器之上。
  AOP模块；
  数据访问与集成：Spring的JDBC和DAO封装了板式代码，ORM(object-relational mapping)支持，对Hibernate、Java Persisternce API、JDO和iBATIS集成，事务管理支持所有的ORM框架以及JDBC。
  Web和远程调用：两种形式：面向传统Web应用的Servlet的框架和面向Java Portlet API的基于Portlet的应用。
  测试：为JNDI、Servlet和Portlet编写单元测试。
2. Spring Portfolio
  Spring Portfolio包括多个构建于核心Spring框架之上的框架和类库，为几乎每个领域的Java的开发提供了Spring的编程模型。
  Spring Web Flow
    建立在Spring MVC框架之上并基于流程的会话式Web应用提供支持。
  Spring Web Service
    提供了契约优先的Web Service模型，服务的实现都是为了满足服务的契约而编写的。
  Spring Security
    利用Spring AOP，Spring Security为Spring应用提供了声明式的安全机制。
  Spring Integration
    提供几种通用的应用集成模式的Spring声明式风格的实现。
  Spring Batch
    面向POJO的编程模型使用Spring Batch实现。
  Spring Social
    社交模块。
  Spring Mobile
    Spring Android。
  Spring Dynamic Modules
    整合了Spring的声明式依赖注入和OSGi的动态组件模型。
  Spring LDAP
    创建基于模板的抽象层来封装多余的复杂操作。
  Spring Rich Client
    Swing。
  Spring .NET
  Spring-Flex
  Spring Roo
  Spring Extensions
--------------------
四、Spring新功能
  Spring 3.0
    Spring MVC全面支持Rest；
    新的表达式语言；
    Spring MVC新的注解，@CookieValue和@RequestHeader；
    新的XML命名空间，减少Spring MVC配置；
    通过注解驱动声明异步和调度方法。

--------------------chapter 2 装配Bean--------------------
装配：创建应用对象之间协作关系的行为。
--------------------
一、声明Bean
1. 创建Spring配置
 Spring容器两种配置Bean方式：使用一个或多个XML文件作为配置文件；基于Java注解的配置方式。
 XML文件配置：
   <beans>
   </beans>
   在<beans>元素内，可以放置Spring配置信息，包括<bean>声明。
---------------Spring命名空间---------------
aop	为声明切面以及将@AspectJ注解的类代理为Spring切面提供了配置元素
beans	支持声明Bean和装配Bean，是Spring最核心也是最原始的命名空间
context	为配置Spring应用上下文提供了配置元素，包括自动检测和自动装配Bean、注入非Spring直接管理的对象
jee	提供了与Java EE API的集成，例如JNDI和EJB
jms	为声明消息驱动的POJO提供了配置元素
lang	支持配置Groovy、JRuby或BeanShell等脚本实现的Bean
mvc	启用Spring MVC的能力，例如面向注释的控制器、视图控制器和拦截器
oxm	支持Spring的对象到XML映射配置
tx	提供声明式事务配置
util	提供各种各样的工具类元素，包括把集合配置为Bean、支持属性占位符元素
-------------------------------------------
2. 声明一个简单的Bean
----------------------------------------
  <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">
    <bean id="duke" class="com.whut.Juggler"/>
</beans>
----------------------------------------
相当于new com.whut.Juggler();创建一个对象，注意这里的schemaLocation，应该和spring-beans.jar中保持一致。
3. 通过构造器注入
----------------------------------------
  <bean id="duke" class="com.whut.Juggler">
    <constructor-arg value="15" />
  </bean>
----------------------------------------
  通过构造器注入对象引用
----------------------------------------
<bean id="sonnet29" class="com.whut.Sonnet29" />
<bean id="poeticDuke" class="com.whut.PoetJuggler"
  <constructor-arg value="15"/>
  <constructor-arg ref="sonnet29"/>
</bean>
----------------------------------------
    ref属性传递Bean引用。
  通过工厂方法创建Bean
----------------------------------------
public class stage{
  private Stage(){
  }
  private static class StageSingletonHolder{
    static Stage instance = new Stage();
  }
  public static Stage getInstance(){
    return StageSingletonHolder.instance;
  }
}
<bean id="theStage" class="com.whut.Stage"
  factory-method="getInstance"/>
----------------------------------------
4. Bean的作用域
  所有Spring Bean默认是单例，仅限于Spring上下文的范围内。
----------------------------------------
singleton	在每个Spring容器中，一个Bean定义只有一个对象实例
prototype	允许Bean的定义可以被实例化任意次
request		在一次HTTP请求中，每个Bean定义对应一个实例，该作用域仅在基于Web的Spring上下文中才有效
session		在一个HTTP Session中，每个Bean定义对应一个实例，该作用域仅在基于Web的Spring上下文中才有效
global-session	在一个全局HTTP Session中，每个Bean定义对应一个实例，该作用域仅在Portlet上下文中才有效
----------------------------------------
5. 初始化和销毁Bean

