-------------------------chapter 05 函数-------------------------
--------------------5.1 函数声明--------------------
1. 函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体：
********************
func name(parameter-list) (result-list) {
  body
}
********************
2. 如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的，不会有任何返回值。
3. 如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型。
  func f(i, j, k int, s, t string)
4. 函数的类型被称为函数的标识符。如果两个函数形式参数列表和返回值列表中的变量类型一一对应，那么这两个函数被认为有相同的类型和标识符。形参和返回值的变量名不影响函数标识符。
5. Go语言没有默认参数值，也没有任何方法可以通过参数名指定形参。
6. 实参通过值的方式传递，因此函数的形参是实参的拷贝。
7. 如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可能会由于函数的间接引用被修改。
8. 没有函数体的函数声明，这表示该函数不是以Go实现的（汇编）。
--------------------5.2 递归--------------------
1. 通过递归解析HTML
  在函数体内调用自己
--------------------5.3 多返回值--------------------
1. 一个函数可以返回多个值。
2. 虽然Go的垃圾回收机制会回收不被使用的内存，但是这不包括操作系统层面的资源，比如打开的文件、网络连接。因此我们必须显式的释放这些资源。
********************
func main() {
	for _, url := range os.Args[1:] {
		links, err := findLinks(url)
		if err != nil {
			fmt.Fprintf(os.Stderr, "findlinks2: %v\n", err)
			continue
		}
		for _, link := range links {
			fmt.Println(link)
		}
	}
}

// findLinks performs an HTTP GET request for url, parses the
// response as HTML, and extracts and returns the links.
func findLinks(url string) ([]string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
	}
	doc, err := html.Parse(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
	}
	return visit(nil, doc), nil
}
********************
3. 一个函数内部可以将另一个有多返回值的函数作为返回值：
********************
func findLinksLog(url string) ([]string, error) {
  log.Printf("findLinks %s", url)
  return findLinks(url)
}
********************
4. 当你调用接受多参数的函数时，可以将一个返回多参数的函数作为该函数的参数。
5. 如果一个函数将所有的返回值都显示的变量名，那么该函数的return语句可以省略操作数。这称之为bare return。这里的与形参同名直接返回。
