-------------------------chapter 05 函数-------------------------
--------------------5.1 函数声明--------------------
1. 函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体：
********************
func name(parameter-list) (result-list) {
  body
}
********************
2. 如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的，不会有任何返回值。
3. 如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型。
  func f(i, j, k int, s, t string)
4. 函数的类型被称为函数的标识符。如果两个函数形式参数列表和返回值列表中的变量类型一一对应，那么这两个函数被认为有相同的类型和标识符。形参和返回值的变量名不影响函数标识符。
5. Go语言没有默认参数值，也没有任何方法可以通过参数名指定形参。
6. 实参通过值的方式传递，因此函数的形参是实参的拷贝。
7. 如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可能会由于函数的间接引用被修改。
8. 没有函数体的函数声明，这表示该函数不是以Go实现的（汇编）。
--------------------5.2 递归--------------------
1. 通过递归解析HTML
  在函数体内调用自己
--------------------5.3 多返回值--------------------
1. 一个函数可以返回多个值。
2. 虽然Go的垃圾回收机制会回收不被使用的内存，但是这不包括操作系统层面的资源，比如打开的文件、网络连接。因此我们必须显式的释放这些资源。
********************
func main() {
	for _, url := range os.Args[1:] {
		links, err := findLinks(url)
		if err != nil {
			fmt.Fprintf(os.Stderr, "findlinks2: %v\n", err)
			continue
		}
		for _, link := range links {
			fmt.Println(link)
		}
	}
}

// findLinks performs an HTTP GET request for url, parses the
// response as HTML, and extracts and returns the links.
func findLinks(url string) ([]string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
	}
	doc, err := html.Parse(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
	}
	return visit(nil, doc), nil
}
********************
3. 一个函数内部可以将另一个有多返回值的函数作为返回值：
********************
func findLinksLog(url string) ([]string, error) {
  log.Printf("findLinks %s", url)
  return findLinks(url)
}
********************
4. 当你调用接受多参数的函数时，可以将一个返回多参数的函数作为该函数的参数。
5. 如果一个函数将所有的返回值都显示的变量名，那么该函数的return语句可以省略操作数。这称之为bare return。这里的与形参同名直接返回。
--------------------
5.4 错误
  1. Go中有一部分函数总是能成功的运行，对各种可能的错误做了良好的处理，不会失败运行，除非遇到灾难性的情况，比如内存溢出。
  2. 当函数返回non-nil的error时，其他的返回值是未定义的(undefined),这些未定义的返回值应该被忽略。但有少部分函数在发生错误时，仍然会返回一些有用的返回值。
  比如：当读取文件发生错误时，Read函数会返回可以读取的字节数以及错误信息。
  3. 对于某个应该在控制流程中处理的错误而言，将这个错误以异常的形式抛出会混乱对错误的描述，这通常会导致一些糟糕的后果。当某个程序错误被当作异常处理后，这个错误会将堆栈根据信息返回给终端用户，这些信息复杂且无用，无法帮助定位错误。
--------------------
5.4.1 错误处理策略
  当一次函数调用返回错误时，调用者有应该选择何时的方式处理错误
  1. 传播错误
  fmt.Errorf函数使用fmt.Sprintf格式化错误信息并返回。
  由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。
  描述错误信息详尽，尤其是要注意错误信息表达的一致性，即相同的函数或同包内的同一组函数返回的错误在构成和处理方式上是相似的。
********************
resp, err := http.Get(url)
if err != nil{
  return nil, err
}

doc, err := html.Parse(resp.Body)
resp.Body.Close()
if err != nil {
  return nil, fmt.Errorf("parsing %s as HTML: %v", url,err)
}
********************
  2. 错误发生是偶然的
  方法：重新尝试，限制重试的时间间隔
********************
func WaitForServer(url string) error {
	const timeout = 1 * time.Minute
	deadline := time.Now().Add(timeout)
	for tries := 0; time.Now().Before(deadline); tries++ {
		_, err := http.Head(url)
		if err == nil {
			return nil // success
		}
		log.Printf("server not responding (%s);retrying…", err)
		time.Sleep(time.Second << uint(tries)) // exponential back-off
	}
	return fmt.Errorf("server %s failed to respond after %s", url, timeout)
}
********************
  3. 输出错误信息并结束程序
  这种策略只应在main中执行。对库函数而言，应仅向上传播错误，除非该错误意味着程序内部包含不一致性，即遇到了bug，才能在库函数中结束程序。
********************
if err := WaitForServer(url); err != nil {
  fmt.Fprintf(os.Stderr, "Site is down: %v\n", err)
  os.Exit(1)
}
//调用log.Fatal达到相同效果，log中所有函数默认输出错误信息时间
if err := WaitForServer(url); err != nil {
  log.Fatalf("Site is down: %v\n", err)
}
********************
  可以设置log的前缀信息屏蔽时间信息，一般而言，前缀信息会被设置成命令名。
  ********************
  log.SetPrefix("wait: ")
  log.SetFlags(0)
  ********************
  4. 只需要输出错误信息就足够了，不需要中断程序的运行。
********************
if err := Ping(); err != nil {
  log.Printf("ping failed: %v; networking disabled",err)
}
//或者标准错误流输出错误信息
if err := Ping(); err != nil {
  fmt.Fprintf(os.Stderr, "ping failed: %v; networking disabled\n", err)
}
********************
  log包中的所有函数会为没有换行符的字符串增加换行符。
  5. 可以直接忽略掉错误
********************
dir, err := ioutil.TempDir("", "scratch")
if err != nil {
  return fmt.Errorf("failed to create temp dir: %v",err)
}
// ...use temp dir…
os.RemoveAll(dir) // ignore errors; $TMPDIR is cleaned periodically
********************
  os.RemoveAll会失败，但是忽略。
  检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。
--------------------
5.4.2 文件结尾错误（EOF）
********************
//如何从标准输入中读取字符，以及判断文件结束
in := bufio.NewReader(os.Stdin)
for {
  r, _, err := in.ReadRune()
  if err == io.EOF {
    break // finished reading
  }
  if err != nil {
    return fmt.Errorf("read failed:%v", err)
  }
  // ...use r…
}
********************
--------------------
5.5 函数值
1. 在Go中，函数被看作第一类值（first-class values）：函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。对函数值（function value）的调用类似函数调用。
********************
func square(n int) int { return n * n }
func negative(n int) int { return -n }
func product(m, n int) int { return m * n }
f := square
fmt.Println(f(3)) // "9"
f = negative
fmt.Println(f(3)) // "-3"
fmt.Printf("%T\n", f) // "func(int) int"
f = product // compile error: can't assign func(int, int) int to func(int) int
********************
2. 函数类型的零值是nil。调用值为nil的函数值会引起panic错误
********************
var f func(int) int
f(3) // 此处f的值为nil, 会引起panic错误
********************
  函数值可以和nil比较，但函数值之间是不可比较的，也不能用函数值作为map的key。
  strings.Map对字符串中的每个字符调用add1函数，并将每个add1函数的返回值组成一个新的字符串返回给调用者：
********************
func add1(r rune) rune { return r + 1 }
fmt.Println(strings.Map(add1, "HAL-9000")) // "IBM.:111"
fmt.Println(strings.Map(add1, "VMS")) // "WNT"
fmt.Println(strings.Map(add1, "Admix")) // "Benjy"
********************
3. findLinks函数使用了辅助函数visit,遍历和操作了HTML页面的所有结点。
********************
// forEachNode针对每个结点x,都会调用pre(x)和post(x)。
// pre和post都是可选的。
// 遍历孩子结点之前,pre被调用
// 遍历孩子结点之后，post被调用
func forEachNode(n *html.Node, pre, post func(n *html.Node)) {
  if pre != nil {
    pre(n)
  }
  for c := n.FirstChild; c != nil; c = c.NextSibling {
    forEachNode(c, pre, post)
  }
  if post != nil {
    post(n)
  }
}
var depth int
func startElement(n *html.Node) {
  if n.Type == html.ElementNode {
    fmt.Printf("%*s<%s>\n", depth*2, "", n.Data)
    depth++
  }
}
func endElement(n *html.Node) {
  if n.Type == html.ElementNode {
    depth--
    fmt.Printf("%*s</%s>\n", depth*2, "", n.Data)
  }
}

forEachNode(doc, startElement, endElement)
********************
--------------------
5.6 匿名函数
1. 函数值字面量是一种表达式，它的值被成为匿名函数（anonymous function），允许在使用函数时，在定义它：
********************
strings.Map(func(r rune) rune { return r + 1}, "HAL-9000")
********************
2. 通过这种方式定义的函数可以访问完整的词法环境（lexical environment），在函数中定义的内部函数可以引用该函数的变量
********************
// squares返回一个匿名函数。
// 该匿名函数每次被调用时都会返回下一个数的平方。
func squares() func() int {
  var x int
  return func() int {
    x++
    return x * x
  }
}
func main() {
  f := squares()
  fmt.Println(f()) // "1"
  fmt.Println(f()) // "4"
  fmt.Println(f()) // "9"
  fmt.Println(f()) // "16"
}
********************
  1. 函数值不仅仅是一串代码，还记录了状态，Go使用闭包（closures）技术实现函数值，Go程序员也把函数值叫做闭包。
  这里变量的生命周期不由它的作用域决定。
  2. 拓扑排序
********************
var prereqs = map[string][]string{
  "algorithms": {"data structures"},
  "calculus": {"linear algebra"},
  "compilers": {
    "data structures",
    "formal languages",
    "computer organization",
  },
  "data structures": {"discrete math"},
  "databases": {"data structures"},
  "discrete math": {"intro to programming"},
  "formal languages": {"discrete math"},
  "networks": {"operating systems"},
  "operating systems": {"data structures", "computer organization"},
  "programming languages": {"data structures", "computer organization"},
}
********************
********************
func main() {
	for i, course := range topoSort(prereqs) {
		fmt.Printf("%d:\t%s\n", i+1, course)
	}
}
func topoSort(m map[string][]string) []string {
	var order []string
	seen := make(map[string]bool)
	var visitAll func(items []string)
	visitAll = func(items []string) {
		for _, item := range items {
			if !seen[item] {
				seen[item] = true
				visitAll(m[item])
				order = append(order, item)
			}
		}
	}
	var keys []string
	for key := range m {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	visitAll(keys)
	return order
}
********************
  3. 当匿名函数需要被递归调用时，我们必须首先声明一个变量（在上面的例子中，我们首先声明了 visitAll），再将匿名函数赋值给这个变量。如果不分成两部，函数字面量无法与visitAll绑定，我们也无法递归调用该匿名函数。
  4. findLinks
********************
package links

import (
	"fmt"
	"net/http"

	"golang.org/x/net/html"
)

// Extract makes an HTTP GET request to the specified URL, parses
// the response as HTML, and returns the links in the HTML document.
func Extract(url string) ([]string, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, fmt.Errorf("getting %s: %s", url, resp.Status)
	}
	doc, err := html.Parse(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, fmt.Errorf("parsing %s as HTML: %v", url, err)
	}
	var links []string
	visitNode := func(n *html.Node) {
		if n.Type == html.ElementNode && n.Data == "a" {
			for _, a := range n.Attr {
				if a.Key != "href" {
					continue
				}
				link, err := resp.Request.URL.Parse(a.Val)
				if err != nil {
					continue // ignore bad URLs
				}
				links = append(links, link.String())
			}
		}
	}
	forEachNode(doc, visitNode, nil)
	return links, nil
}
********************
  广度优先遍历
********************
func breadthFirst(f func(item string) []string, worklist []string) {
	seen := make(map[string]bool)
	for len(worklist) > 0 {
		items := worklist
		worklist = nil
		for _, item := range items {
			if !seen[item] {
				seen[item] = true
				worklist = append(worklist, f(item)...)
			}
		}
	}
}
********************
  crawl函数会将URL输出，提取其中的新链接，并将这些新链接返回：
********************
func crawl(url string) []string {
	fmt.Println(url)
	list, err := links.Extract(url)
	if err != nil {
		log.Print(err)
	}
	return list
}

func main() {
  // Crawl the web breadth-first,
  // starting from the command-line arguments.
  breadthFirst(crawl, os.Args[1:])
}
********************
--------------------
5.6.1 警告：捕捉迭代变量
********************
var rmdirs []func()
for _, d := range tempDirs() {
	dir := d               // NOTE: necessary!
	os.MkdirAll(dir, 0755) // creates parent directories too
	rmdirs = append(rmdirs, func() {
		os.RemoveAll(dir)
	})
}
// ...do some work…
for _, rmdir := range rmdirs {
	rmdir() // clean up
}

//错误代码
var rmdirs []func()
for _, dir := range tempDirs() {
  os.MkdirAll(dir, 0755)
  rmdirs = append(rmdirs, func() {
    os.RemoveAll(dir) // NOTE: incorrect!
  })
}
********************
  1. 原因在于循环变量的作用域，for循环语句引入了新的词法块，循环变量dir在这个词法块中被声明。在该循环中生成的所有函数值都共享相同的循环变量。函数值中记录的是循环变量的内存地址，而不是循环变量某一时刻的值。以dir为例，后续的迭代会不断更新dir的值，当删除操作执行时，for循环已完成，dir中存储的值等于最后一次迭代的值。
  2. 下面同样错误：
********************
var rmdirs []func()
dirs := tempDirs()
for i := 0; i < len(dirs); i++ {
  os.MkdirAll(dirs[i], 0755) // OK
  rmdirs = append(rmdirs, func() {
    os.RemoveAll(dirs[i]) // NOTE: incorrect!
  })
}
********************
--------------------
5.7 可变函数
1. 参数数量可变的函数称为为可变参数函数。例如fmt.Printf()。
2. 在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号“...”，这表示该函数会接收任意数量的该类型参数。
********************
func sum(vals...int) int {
  total := 0
  for _, val := range vals {
    total += val
  }
  return total
}
//相同功能
values := []int{1, 2, 3, 4}
fmt.Println(sum(values...)) // "10"
********************
调用者隐式的创建一个数组，并将原始参数复制到数组中，再把数组的一个切片作为参数传给被调函数。
3. ...int 型参数的行为看起来很像切片类型，但实际上，可变参数函数和以切片作为参数的函数是不同的。
4. 用于输错错误信息
********************
func errorf(linenum int, format string, args ...interface{}) {
  fmt.Fprintf(os.Stderr, "Line %d: ", linenum)
  fmt.Fprintf(os.Stderr, format, args...)
  fmt.Fprintln(os.Stderr)
}
linenum, name := 12, "count"
errorf(linenum, "undefined: %s", name) // "Line 12: undefined: count"
********************
--------------------
5.8 Deferred函数
1. 获取HTML页面并输出页面的标题。title函数会检查服务器返回的Content-Type字段，如果发现页面不是HTML，将终止函数运行，返回错误。
********************
func title(url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	// Check Content-Type is HTML (e.g., "text/html;charset=utf-8").
	ct := resp.Header.Get("Content-Type")

	if ct != "text/html" && !strings.HasPrefix(ct, "text/html;") {
		resp.Body.Close()
		return fmt.Errorf("%s has type %s, not text/html", url, ct)
	}
	doc, err := html.Parse(resp.Body)
	resp.Body.Close()
	if err != nil {
		return fmt.Errorf("parsing %s as HTML: %v", url, err)
	}
	visitNode := func(n *html.Node) {
		if n.Type == html.ElementNode && n.Data == "title" && n.FirstChild != nil {
			fmt.Println(n.FirstChild.Data)
		}
	}
	forEachNode(doc, visitNode, nil)
	return nil
}
********************
2. 在调用普通函数或方法前加上关键字defer，当defer语句被执行时，跟在defer后面的函数会被延迟执行。直到包含该defer语句的函数执行完毕时，defer后的函数才会被执行，不论包含defer语句的函数是通过return正常结束，还是由于panic导致的异常结束。
3. 在一个函数中执行多条defer语句，它们的执行顺序与声明顺序相反。
********************
package ioutil
func ReadFile(filename string) ([]byte, error) {
  f, err := os.Open(filename)
  if err != nil {
    return nil, err
  }
  defer f.Close()
  return ReadAll(f)
}
var mu sync.Mutex
var m = make(map[string]int)
func lookup(key string) int {
  mu.Lock()
  defer mu.Unlock()
  return m[key]
}
********************
4. 调试复杂程序时，defer机制也常被用于记录何时进入和退出函数。不要忘记defer语句后的圆括号。
********************
func bigSlowOperation() {
  defer trace("bigSlowOperation")() // don't forget the
  extra parentheses
  // ...lots of work…
  time.Sleep(10 * time.Second) // simulate slow
  operation by sleeping
}
func trace(msg string) func() {
  start := time.Now()
  log.Printf("enter %s", msg)
  return func() {
    log.Printf("exit %s (%s)", msg,time.Since(start))
  }
}
********************
4. defer语句中的函数会在return语句更新返回值变量后再执行，又因为在函数中定义的匿名函数可以访问该函数包括返回值变量在内的所有变量，所以，对匿名函数采用defer机制，可以使其观察函数的返回值。
********************
func double(x int) (result int) {
  defer func() { fmt.Printf("double(%d) = %d\n", x, result)}()
  return x + x
}
_ = double(4)
********************
5. 下面会导致系统的文件描述符耗尽，因为在所有文件都被处理之前，没有文件会被关闭。
********************
for _, filename := range filenames {
  f, err := os.Open(filename)
  if err != nil {
    return err
  }
  defer f.Close() // NOTE: risky; could run out of file
  descriptors
  // ...process f…
}
********************
解决办法：将循环体中的defer语句移至另外一个函数
********************
for _, filename := range filenames {
if err := doFile(filename); err != nil {
  return err
}
}
func doFile(filename string) error {
  f, err := os.Open(filename)
  if err != nil {
    return err
  }
  defer f.Close()
  // ...process f…
}
********************
6. 通过os.Create打开文件进行写入，在关闭文件时，我们没有对f.close采用defer机制，因为这会产生一些微妙的错误。许多文件系统，尤其是NFS，写入文件时发生的错误会被延迟到文件关闭时反馈。如果没有检查文件关闭时的反馈信息，可能会导致数据丢失，而我们还误以为写入操作成功。如果io.Copy和f.close都失败了，我们倾向于将io.Copy的错误信息反馈给调用者，因为它先于f.close发生，更有可能接近问题的本质。
********************
func fetch(url string) (filename string, n int64, err error) {
	resp, err := http.Get(url)
	if err != nil {
		return "", 0, err
	}
	defer resp.Body.Close()
	local := path.Base(resp.Request.URL.Path)
	if local == "/" {
		local = "index.html"
	}
	f, err := os.Create(local)
	if err != nil {
		return "", 0, err
	}
	n, err = io.Copy(f, resp.Body)
	// Close file, but prefer error from Copy, if any.
	if closeErr := f.Close(); err == nil {
		err = closeErr
	}
	return local, n, err
}
********************
--------------------
5.9 Panic异常
1. 运行时错误会引起painc异常。
2. 当panic异常发生时，程序会中断运行，并立即执行在该goroutine中被延迟的函数（defer 机制）。
3. 不是所有的panic异常都来自运行时，直接调用内置的panic函数也会引发panic异常；panic函数接受任何值作为参数。当某些不应该发生的场景发生时，我们就应该调用panic。
4. regexp包提供了包装函数regexp.MustCompile检查输入的合法性。
********************
package regexp
func Compile(expr string) (*Regexp, error) { /* ... */ }
func MustCompile(expr string) *Regexp {
  re, err := Compile(expr)
  if err != nil {
    panic(err)
  }
  return re
}
var httpSchemeRE = regexp.MustCompile(`^https?:`) //"http:" or "https:"
********************
5. 为了方便诊断问题，runtime包允许程序员输出堆栈信息。
********************
func main() {
  defer printStack()
  f(3)
}
func printStack() {
  var buf [4096]byte
  n := runtime.Stack(buf[:], false)
  os.Stdout.Write(buf[:n])
}
********************
runtime.Stack为何能输出已经被释放函数的信息？在Go的panic机制中，延迟函数的调用在释放堆栈信息之前。
--------------------
5.10 Recover捕获异常
1. 如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value。导致panic异常的函数不会继续运行，但能正常返回。在未发生panic时调用recover，recover会返回nil。
2. 解析器
********************
func Parse(input string) (s *Syntax, err error) {
  defer func() {
    if p := recover(); p != nil {
      err = fmt.Errorf("internal error: %v", p)
    }
  }()
  // ...parser...
}
********************
3. 不加区分的恢复所有的panic异常，不是可取的做法；因为在panic之后，无法保证包级变量的状态仍然和我们预期一致。
4. 安全的做法是有选择性的recover。
********************
func soleTitle(doc *html.Node) (title string, err error) {
	type bailout struct{}
	defer func() {
		switch p := recover(); p {
		case nil: // no panic
		case bailout{}: // "expected" panic
			err = fmt.Errorf("multiple title elements")
		default:
			panic(p) // unexpected panic; carry on panicking
		}
	}()
	// Bail out of recursion if we find more than one nonempty title.
	forEachNode(doc, func(n *html.Node) {
		if n.Type == html.ElementNode && n.Data == "title" &&
			n.FirstChild != nil {
			if title != "" {
				panic(bailout{}) // multiple titleelements
			}
			title = n.FirstChild.Data
		}
	}, nil)
	if title == "" {
		return "", fmt.Errorf("no title element")
	}
	return title, nil
}
********************
deferred函数调用recover，并检查panic value。当panic value是bailout{}类型时，deferred函数生成一个error返回给调用者。当panic value是其他non-nil值时，表示发生了未知的panic异常，deferred函数将调用panic函数并将当前的panic value作为参数传入；此时，等同于recover没有做任何操作。
-------------------------chapter 06 方法-------------------------
--------------------6.1 方法声明--------------------
1. 在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附加到这种类型上，即相当于为这种类型定义了一个独占的方法。
********************
type Point struct{ X, Y float64 }

// traditional function
func Distance(p, q Point) float64 {
	return math.Hypot(q.X-p.X, q.Y-p.Y)
}

// same thing, but as a method of the Point type
func (p Point) Distance(q Point) float64 {
	return math.Hypot(q.X-p.X, q.Y-p.Y)
}
p := Point{1, 2}
q := Point{4, 6}
fmt.Println(Distance(p, q)) // "5", function call
fmt.Println(p.Distance(q)) // "5", method call
********************
附加的参数p，叫做方法的接收器(receiver)
--------------------6.2 基于指针对象的方法--------------------
--------------------
func (p *Point) ScaleBy(factor float64) {
  p.X *= factor
  p.Y *= factor
}
--------------------
这里函数为 (*Point).ScaleBy 。
1. 只有类型(Point)和指向他们的指针 (*Point) ，才是可能会出现在接收器声明里的两种接收器。
2. 为了避免歧义，在声明方法时，如果一个类型名本身是一个指针的话，是不允许其出现在接收器中的：
********************
type P *int
func (P) f() { /* ... */ }
********************
3. 调用指针类型方法 (*Point).ScaleBy ，只要提供一个Point类型的指针即可:
********************
r := &Point{1, 2}
r.ScaleBy(2)
fmt.Println(*r) // "{2, 4}"
//或者
p := Point{1, 2}
pptr := &p
pptr.ScaleBy(2)
fmt.Println(p) // "{2, 4}"
//或者
p := Point{1, 2}
(&p).ScaleBy(2)
fmt.Println(p) // "{2, 4}"
********************
4. 如果接收器p是一个Point类型的变量，并且其方法需要一个Point指针作为接收器，下面简短写法：
********************
p.ScaleBy(2)
********************
编译器会隐式地帮我们用&p去调用ScaleBy这个方法。
5. 我们可以用一个 *Point 这样的接收器来调用Point的方法，因为我们可以通过地址来找到这个变量，只要用解引用符号 * 来取到该变量即可。编译器在这里也会给我们隐式地插入 * 这个操作符
********************
pptr.Distance(q)
(*pptr).Distance(q)
********************
6. 下面三种调用均可：
A. 不论是接收器的实际参数和其接收器的形式参数相同，比如两者都是类型T或者都是类型 *T
********************
Point{1, 2}.Distance(q) // Point
pptr.ScaleBy(2) // *Point
********************
B. 接收器实参是类型T，但接收器形参是类型 *T ，这种情况下编译器会隐式地为我们取变量的地址
********************
p.ScaleBy(2) // implicit (&p)
********************
C. 接收器实参是类型 *T ，形参是类型T。编译器会隐式地为我们解引用，取到指针指向的实际变量：
********************
pptr.Distance(q)//implicit (*pptr)
********************
注：
如果命名类型T(译注：用type xxx定义的类型)的所有方法都是用T类型自己来做接收器(而不是 *T )，那么拷贝这种类型的实例就是安全的；调用他的任何一个方法也就会产生一个值的拷贝。
但是如果一个方法使用指针作为接收器，你需要避免对其进行拷贝，因为这样可能会破坏掉该类型内部的不变性。
--------------------
6.2.1 Nil也是一个合法的接收器类型
就像在普通函数中一样，虽然可以通过引用来操作内部值，但在方法想要修改引用本身是不会影响原始值的，比如把他置为nil，或者让这个引用指向了其它的对象，调用方都不会受影响。
--------------------
6.3 通过嵌入结构体来扩展类型
********************
import "image/color"
type Point struct{ X, Y float64 }
type ColoredPoint struct {
  Point
  Color color.RGBA
}
********************
在类型中内嵌的匿名字段也可能是一个命名类型的指针，这种情况下字段和方法会被间接地引入到当前的类型中。
一个struct类型也可能会有多个匿名字段：
********************
type ColoredPoint struct {
  Point
  color.RGBA
}
********************
********************
//vaesion 1
var (
  mu sync.Mutex // guards mapping
  mapping = make(map[string]string)
)
func Lookup(key string) string {
  mu.Lock()
  v := mapping[key]
  mu.Unlock()
  return v
}
//version 2
var cache = struct {
  sync.Mutex
  mapping map[string]string
}{
  mapping: make(map[string]string),
}
func Lookup(key string) string {
  cache.Lock()
  v := cache.mapping[key]
  cache.Unlock()
  return v
}
********************
--------------------
6.4 方法值和方法表达式
p.Distance叫作“选择器”，选择器会返回一个方法"值"->一个将方法(Point.Distance)绑定到特定接收器变量的函数。这个函数可以不通过指定其接收器即可被调用；即调用时不需要指定接收器(译注：因为已经在前文中指定过了)，只要传入函数的参数即可：
********************
p := Point{1, 2}
q := Point{4, 6}
distanceFromP := p.Distance // method value
fmt.Println(distanceFromP(q)) // "5"
var origin Point // {0, 0}
fmt.Println(distanceFromP(origin)) // "2.23606797749979", sqrt(5)
scaleP := p.ScaleBy // method value
scaleP(2) // p becomes (2, 4)
scaleP(3) // then (6, 12)
scaleP(10) // then (60, 120)
********************
在一个包的API需要一个函数值、且调用方希望操作的是某一个绑定了对象的方法的话，方法"值"会非常实用。
********************
type Rocket struct { /* ... */ }
func (r *Rocket) Launch() { /* ... */ }
r := new(Rocket)
time.AfterFunc(10 * time.Second, func() { r.Launch() })
********************
直接用方法"值"传入AfterFunc的话可以更为简短：
time.AfterFunc(10 * time.Second, r.Launch)
当T是一个类型时，方法表达式可能会写作 T.f 或者 (*T).f ，会返回一个函数"值"，这种函数会将其第一个参数用作接收器，所以可以用通常(译注：不写选择器)的方式来对其进行调用：
********************
p := Point{1, 2}
q := Point{4, 6}
distance := Point.Distance // method expression
fmt.Println(distance(p, q)) // "5"
fmt.Printf("%T\n", distance) // "func(Point, Point) float64"
scale := (*Point).ScaleBy
scale(&p, 2)
fmt.Println(p) // "{2 4}"
fmt.Printf("%T\n", scale) // "func(*Point, float64)"
********************
--------------------
6.5 Bit数组
1. 在数据流分析领域，集合元素通常是一个非负整数，集合会包含很多元素，并且集合会经常进行并集、交集操作，这种情况下，bit数组会比map表现更加理想。
  例如：执行一个http下载任务，把文件按照16kb一块划分为很多块，需要有一个全局变量来标识哪些块下载完成了，这种时候也需要用到bit数组
2. 一个bit数组通常会用一个无符号数或者称之为“字”的slice来表示，每一个元素的每一位都表示集合里的一个值。
  使用到位数组的代码，一般出于两个考虑： 1. 降低存储空间。2. 加快查找效率(能迅速判断某个地元素是否在一个集合中)。
********************
type IntSet struct {
	words []uint64
}

func (s *IntSet) Has(x int) bool {
	word, bit := x/64, uint(x%64)
	return word < len(s.words) && s.words[word]&(1<<bit) != 0
}

func (s *IntSet) Add(x int) {
	word, bit := x/64, uint(x%64)
	for word >= len(s.words) {
		s.words = append(s.words, 0)
	}
	s.words[word] |= 1 << bit
}

func (s *IntSet) UnionWith(t *IntSet) {
	for i, tword := range t.words {
		if i < len(s.words) {
			s.words[i] |= tword
		} else {
			s.words = append(s.words, tword)
		}
	}
}
********************
********************
func (s *IntSet) String() string {
	var buf bytes.Buffer
	buf.WriteByte('{')
	for i, word := range s.words {
		if word == 0 {
			continue
		}
		for j := 0; j < 64; j++ {
			if word&(1<<uint(j)) != 0 {
				if buf.Len() > len("{") {
					buf.WriteByte(' ')
				}
				fmt.Fprintf(&buf, "%d", 64*i+j)
			}
		}
	}
	buf.WriteByte('}')
	return buf.String()
}
********************
********************
func main() {
	var x, y IntSet
	x.Add(1)
	x.Add(144)
	x.Add(9)
	fmt.Println(x.String()) // "{1 9 144}"
	y.Add(9)
	y.Add(42)
	fmt.Println(y.String()) // "{9 42}"
	x.UnionWith(&y)
	fmt.Println(x.String())           // "{1 9 42 144}"
	fmt.Println(x.Has(9), x.Has(123)) // "true false"
}
********************
--------------------
6.6 封装
一个对象的变量或者方法如果对调用方是不可见的话，一般就被定义为“封装”。封装有时候也被叫做信息隐藏。
Go语言控制可见性：大写可以从包导出，但是小写不行。
基于名字的手段使得在语言中最小的封装单元是package，而不是像其它语言一样的类型。
封装的优点：
  1. 因为调用方不能直接修改对象的变量值，其只需要关注少量的语句并且只要弄懂少量变量的可能的值即可。
  2. 隐藏实现的细节，可以防止调用方依赖那些可能变化的具体实现，这样使设计包的程序员在不破坏对外的api情况下能得到更大的自由；
  3. 阻止了外部调用方对对象内部的值任意地进行修改。

-------------------------chapter 07 接口-------------------------
但Go语言中接口类型的独特之处在于它是满足隐式实现的：
没有必要对于给定的具体类型定义所有满足的接口类型；简单地拥有一些必需的方法就足够了。
--------------------7.1 接口约定--------------------
接口类型不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会展示出它们自己的方法。
fmt.Printf它会把结果写到标准输出；
fmt.Sprintf它会把结果以字符串的形式返回；
上面两个都可以使用fmt.Fprintf来进行封装。
********************
package fmt
func Fprintf(w io.Writer, format string, args ...interface{}) (int, error)
func Printf(format string, args ...interface{}) (int, error) {
  return Fprintf(os.Stdout, format, args...)
}
func Sprintf(format string, args ...interface{}) string {
  var buf bytes.Buffer
  Fprintf(&buf, format, args...)
  return buf.String()
}
********************
io.Writer类型这是一个接口类型定义：
********************
package io
type Writer interface {
  Write(p []byte) (n int, err error)
}
********************
--------------------
7.2 接口类型
  io.Writer类型是用的最广泛的接口之一，因为它提供了所有的类型写入bytes的抽象：
  包括文件类型，内存缓冲区，网络链接，HTTP客户端，压缩工具，哈希等等。
********************
package io
type Reader interface {
  Read(p []byte) (n int, err error)
}
type Closer interface {
  Close() error
}
type ReadWriter interface {
  Reader
  Writer
}
type ReadWriteCloser interface {
  Reader
  Writer
  Closer
}
********************
--------------------
7.3 实现接口的条件
********************
var w io.Writer
w = os.Stdout // OK: *os.File has Write method
w = new(bytes.Buffer) // OK: *bytes.Buffer has Write method
w = time.Second // compile error: time.Duration lacks Write method
var rwc io.ReadWriteCloser
rwc = os.Stdout // OK: *os.File has Read, Write, Close methods
rwc = new(bytes.Buffer) // compile error: *bytes.Buffer lacks Close method

w = rwc // OK: io.ReadWriteCloser has Write method
rwc = w // compile error: io.Writer lacks Close method
********************
 *os.File 类型实现了io.Reader，Writer，Closer，和ReadWriter接口。 *bytes.Buffer 实现了Reader，Writer，和ReadWriter这些接口，但是它没有实现Closer接口因为它不具有Close方法。
 接口指定的规则：表达一个类型属于某个接口只要这个类型实现这个接口。

********************
type IntSet struct { /* ... */ }
func (*IntSet) String() string
var _ = IntSet{}.String() // compile error: String requires *IntSet receiver

var s IntSet
var _ = s.String() // OK: s is a variable and &s has a String method

var _ fmt.Stringer = &s // OK
var _ fmt.Stringer = s // compile error: IntSet lacks String method
********************
由于只有 *IntSet 类型有String方法，所以也只有 *IntSet 类型实现了fmt.Stringer接口
--------------------
********************
os.Stdout.Write([]byte("hello")) // OK: *os.File has Write method
os.Stdout.Close() // OK: *os.File has Close method
var w io.Writer
w = os.Stdout
w.Write([]byte("hello")) // OK: io.Writer has Write method
w.Close() // compile error: io.Writer lacks Close method
********************
实际上interface{}被称为空接口类型是不可或缺的。因为空接口类型对实现它的类型没有要求，所以我们可以将任意一个值赋给空接口类型。
********************
var any interface{}
any = true
any = 12.34
any = "hello"
any = map[string]int{"one": 1}
any = new(bytes.Buffer)
********************
对于*byte.Buffer
********************
// *bytes.Buffer must satisfy io.Writer
var w io.Writer = new(bytes.Buffer)

// *bytes.Buffer must satisfy io.Writer
var _ io.Writer = (*bytes.Buffer)(nil)
********************
--------------------
7.4 flag.Value接口
接口类型flag.Value是帮助命令行标记定义新的符号。
********************
var period = flag.Duration("period", 1*time.Second, "sleep period")
func main() {
  flag.Parse()
  fmt.Printf("Sleeping for %v...", *period)
  time.Sleep(*period)
  fmt.Println()
}

$ ./sleep -period 50ms
Sleeping for 50ms...
$ ./sleep -period 2m30s
Sleeping for 2m30s...
$ ./sleep -period 1.5h
Sleeping for 1h30m0s...
********************
--------------------
7.5 接口值
  接口值，由两个部分组成，一个具体的类型和那个类型的值。它们被称为接口的动态类型和动态值。
  对于Go语言这种静态类型语言，类型是编译器概念，类型不是一个值，一些提供每个类型信息的值被称为类型描述符，在一个接口值中，类型部分代表与之相关类型的描述符。
********************
var w io.writer
w = os.Stdout
w = new(bytes.Buffer)
w = nil
********************
  接口的零值：类型和值都是nil；
  使用w==nil判断是否为空，在一个空接口值调用任意方法会抛出panic；
  通常在编译期，我们不知道接口值的动态类型是什么，所以一个接口上的调用必须使用动态分配。因为不是直接进行调用，所以编译器必须把代码生成在类型描述符的方法Write上，然后间接调用那个地址。这个调用的接收者是一个接口动态值的拷贝，os.Stdout。
  两个接口值的动态类型相同，但是动态类型是不可比较的，它们比较将会失败并且导致panic：
********************
var x interface{} = []int{1,2,3}
fmt.Println(x == x)
********************
--------------------
7.5.1 警告：一个包含nil指针的接口不是nil接口
一个不包含任何值的nil接口值和一个刚好包含nil指针的接口值是不同的。
********************
const debug = true
func main() {
  var buf *bytes.Buffer
  if debug {
    buf = new(bytes.Buffer) // enable collection of output
  }
  f(buf) // NOTE: subtly incorrect!
  if debug {
  // ...use buf...
  }
}
// If out is non-nil, output will be written to it.
func f(out io.Writer) {
  // ...do something...
  if out != nil {
    out.Write([]byte("done!\n"))
  }
}
********************
如果debug设置为false
********************
if out != nil {
  out.Write([]byte("done!\n")) // panic: nil pointer dereference
}
********************
解决：
********************
var buf io.Writer
if debug {
  buf = new(bytes.Buffer)
}
f(buf)
********************
--------------------
7.6 sort.Interface接口
  序列的长度，表示两个元素比较的结果，一种交换两个元素的方式；这就是sort.Interface的三个方法：
********************
type Interface interface {
  Len() int
  Less(i, j int) bool // i, j are indices of sequence elements
  Swap(i, j int)
}
********************
********************
type StringSlice []string
func (p StringSlice) Len() int { return len(p) }
func (p StringSlice) Less(i, j int) bool { return p[i] < p[j] }
func (p StringSlice) Swap(i, j int) { p[i], p[j] = p[j], p[i] }

sort.Sort(StringSlice(names))
********************
********************
import (
	"fmt"
	"os"
	"sort"
	"text/tabwriter"
	"time"
)

type Track struct {
	Title  string
	Artist string
	Album  string
	Year   int
	Length time.Duration
}

var tracks = []*Track{
	{"Go", "Delilah", "From the Roots Up", 2012, length("3m38s")},
	{"Go", "Moby", "Moby", 1992, length("3m37s")},
	{"Go Ahead", "Alicia Keys", "As I Am", 2007, length("4m36s")},
	{"Ready 2 Go", "Martin Solveig", "Smash", 2011, length("4m24s")},
}

func length(s string) time.Duration {
	d, err := time.ParseDuration(s)
	if err != nil {
		panic(s)
	}
	return d
}

func printTracks(tracks []*Track) {
	const format = "%v\t%v\t%v\t%v\t%v\t\n"
	tw := new(tabwriter.Writer).Init(os.Stdout, 0, 8, 2, ' ', 0)
	fmt.Fprintf(tw, format, "Title", "Artist", "Album", "Year", "Length")
	fmt.Fprintf(tw, format, "-----", "------", "-----", "----", "------")
	for _, t := range tracks {
		fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length)
	}
	tw.Flush() // calculate column widths and print table
}

type byArtist []*Track

func (x byArtist) Len() int           { return len(x) }
func (x byArtist) Less(i, j int) bool { return x[i].Artist < x[j].Artist }
func (x byArtist) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }

func main() {
	sort.Sort(byArtist(tracks))
	printTracks(tracks)
}
********************
--------------------
7.7 http.Handler接口
********************
func main() {
	db := database{"shoes": 50, "socks": 5}
	log.Fatal(http.ListenAndServe("localhost:8000", db))
}

type dollars float32

func (d dollars) String() string { return fmt.Sprintf("$%.2f", d) }

type database map[string]dollars

func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	for item, price := range db {
		fmt.Fprintf(w, "%s: %s\n", item, price)
	}
}
********************
进行参数解析：
********************
func (db database) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	switch req.URL.Path {
	case "/list":
		for item, price := range db {
			fmt.Fprintf(w, "%s: %s\n", item, price)
		}
	case "/price":
		item := req.URL.Query().Get("item")
		price, ok := db[item]
		if !ok {
			w.WriteHeader(http.StatusNotFound) // 404
			fmt.Fprintf(w, "no such item: %q\n", item)
			return
		}
		fmt.Fprintf(w, "%s\n", price)
	default:
		w.WriteHeader(http.StatusNotFound) // 404
		fmt.Fprintf(w, "no such page: %s\n", req.URL)
	}
}
********************
当未找到html时，简单处理：
********************
msg := fmt.Sprintf("no such page: %s\n", req.URL)
http.Error(w, msg, http.StatusNotFound) // 404
********************
/price的case会调用URL的Query方法来将HTTP请求参数解析为一个map，或者更准确地说一个net/url包中url.Values(§6.2.1)类型的多重映射。
一些ServeMux可以通过组合来处理更加错综复杂的路由需求。
********************
func main() {
	db := database{"shoes": 50, "socks": 5}
	mux := http.NewServeMux()
	mux.Handle("/list", http.HandlerFunc(db.list))
	mux.Handle("/price", http.HandlerFunc(db.price))
	log.Fatal(http.ListenAndServe("localhost:8000", mux))
}

type dollars float32
type database map[string]dollars

func (db database) list(w http.ResponseWriter, req *http.Request) {
	for item, price := range db {
		fmt.Fprintf(w, "%s: %s\n", item, price)
	}
}
func (db database) price(w http.ResponseWriter, req *http.Request) {
	item := req.URL.Query().Get("item")
	price, ok := db[item]
	if !ok {
		w.WriteHeader(http.StatusNotFound) // 404
		fmt.Fprintf(w, "no such item: %q\n", item)
		return
	}
	fmt.Fprintf(w, "%s\n", price)
}
********************
使用HandlerFunc
********************
mux.HandleFunc("/list", db.list)
mux.HandleFunc("/price", db.price)
********************
--------------------
7.8 error接口
********************
type error interface {
  Error() string
}
func New(text string) error { return &errorString{text} }
type errorString struct { text string }
func (e *errorString) Error() string { return e.text }
********************
因为是指针类型 *errorString 满足error接口而非errorString类型，所以每个New函数的调用都分配了一个独特的和其他错误不相同的实例。我们也不想要重要的error例如io.EOF和一个刚好有相同错误消息的error比较后相等。
********************
fmt.Println(errors.New("EOF") == errors.New("EOF")) // "false"
********************
--------------------
7.9 表达式求值
Var类型表示对一个变量的引用。
literal类型表示一个浮点型常量。
unary和binary类型表示有一到两个运算对象的运算符表达式，这些操作数可以是任意的Expr类型。
call类型表示对一个函数的调用；我们限制它的fn字段只能是pow，sin或者sqrt。
--------------------
7.10 类型断言
一个类型断言检查它操作对象的动态类型是否和断言的类型匹配。
第一种，如果断言的类型T是一个具体类型，然后类型断言检查x的动态类型是否和T相同。
第二种，如果相反断言的类型T是一个接口类型，然后类型断言检查是否x的动态类型满足T。
