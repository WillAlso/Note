------------------------------Go语言圣经------------------------------
-------------------------简介-------------------------
  Go是一个开源的编程语言，它很容易用于构建简单、可靠和高效的软件。
  Go语言有着和C语言类似的语法外表，和C语言一样是专业程序员的必备工具，可以用最小的代价获得最大的战果。 但是它不仅仅是一个更新的C语言。它还从其他语言借鉴了很多好的想法，同时避免引入过度的复杂性。 Go语言中和并发编程相关的特性是全新的也是有效的，同时对数据抽象和面向对象编程的支持也很灵活。 Go语言同时还集成了自动垃圾收集技术用于更好地管理内存。
  Go语言尤其适合编写网络服务相关基础设施，同时也适合开发一些工具软件和系统软件。
  Go编写的程序通常比脚本语言运行的更快也更安全，而且很少会发生意外的类型错误。
--------------------Go语言起源--------------------
  Go从C语言继承了相似的表达式语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有C语言一直所看中的编译后机器码的运行效率以及和现有操作系统的无缝适配。
  顺序通信进程 （communicating sequential processes ，缩写为CSP。在CSP中，程序是一组中间没有共享状态的平行运行的处理过程，它们之间使用管道进行通信和控制同步。
--------------------产生背景--------------------
  “软件的复杂性是乘法级相关的”，通过增加一个部分的复杂性来修复问题通常将慢慢地增加其他部分的复杂性。
  简洁的设计需要在工作开始的时候舍弃不必要的想法，并且在软件的生命周期内严格区别好的改变和坏的改变。通过足够的努力，一个好的改变可以在不破坏原有完整概念的前提下保持自适应，正如Fred Brooks所说的“概念完整性”；而一个坏的改变则不能达到这个效果，它们仅仅是通过肤浅的和简单的妥协来破坏原有设计的一致性。只有通过简洁的设计，才能让一个系统保持稳定、安全和持续的进化。
  Go语言的这些地方都做的还不错：拥有自动垃圾回收、一个包系统、函数作为一等公民、词法作用域、系统调用接口、只读的UTF8字符串等。但是Go语言本身只有很少的特性，也不太可能添加太多的特性。例如，它没有隐式的数值转换，没有构造函数和析构函数，没有运算符重载，没有默认参数，也没有继承，没有泛型，没有异常，没有宏，没有函数修饰，更没有线程局部存储。
  Go语言有足够的类型系统以避免动态语言中那些粗心的类型错误，但是，Go语言的类型系统相比传统的强类型语言又要简洁很多。Go语言简洁的类型系统给程序员带来了更多的安全性和更好的运行时性能。
------------------------------------------------
--------------------chapter 1 入门--------------------
---------------
1.1 Hello,World
**********
//helloworld.go
package main
import "fmt"
func main(){
  fmt.Println("Hello,World")
}
**********
Go是一门编译型语言，Go语言的工具链将源代码及其依赖转换成计算机的机器指令。
**********
go run helloworld.go
**********
go 命令有一系列子命令，这个命令编译一个或多个以.go结尾的源文件、链接库文件，并运行最终生成的可执行文件。
Go语言原生支持Unicode，它可以处理全世界任何语言的文本。
**********
go build helloworld.go
**********
编译程序生成一个名为helloworld的可执行的二进制文件。
1. Go语言的代码通过包（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。一个包由位于单个目录下的一个或多个.go源代码文件组成, 目录定义包的作用。
2. Go的标准库提供了100多个包，以支持常见功能，如输入、输出、排序以及文本处理。
3. fmt 包，就含有格式化输出、接收输入的函数。
4. Println 是其中一个基础函数，可以打印以空格间隔的一个或多个值，并在最后添加一个换行符，从而输出一整行。
5. main 包比较特殊。它定义了一个独立可执行的程序，而不是一个库。
6. 在main 里的 main 函数也很特殊，它是整个程序执行时的入口。
7. 必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。
8. import 声明必须跟在文件的 package 声明之后。
9. 一个函数的声明由 func 关键字、函数名、参数列表、返回值列表（这个例子里的 main 函数参数列表和返回值都是空的）以及包含在大括号里的函数体组成。
10. Go语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。实际上，编译器会主动把特定符号后的换行符转换为分号, 因此换行符添加的位置会影响Go代码的正确解析。
11.  gofmt 工具把代码格式化为标准格式，并且 go 工具中的 fmt 子命令会对指定包, 否则默认为当前目录, 中所有.go源文件应用 gofmt 命令。
---------------
1.2 命令行参数
A. 命令行参数
  1. os 包以跨平台的方式，提供了一些与操作系统交互的函数和变量；
  2. os.Args变量是一个字符串（string）的切片（slice）；
  3. os.Args的第一个元素，os.Args[0], 是命令本身的名字；其它的元素则是程序启动时传给它的参数。
  4. os.Args[1:len(os.Args)]简写成os.Args[1:]。
********************
package main

import (
	"fmt"
	"os"
)

func main() {
	var s, sep string
	for i := 1; i < len(os.Args); i++ {
		s += sep + os.Args[i]
		sep = " "
	}
	fmt.Println(s)
}
********************
  5. 注释语句以 // 开头。
  6. 变量会在声明时直接初始化。如果变量没有显式初始化，则被隐式地赋予其类型的零值（zero value），数值类型是0，字符串类型是空字符串""。
  7. 自增语句 i++ 给 i 加1；这和 i += 1 以及 i = i + 1 都是等价的。j = i++ 非法，而且++和--都只能放在变量名后面，因此 --i 也非法。
  8. Go语言只有for循环这一种循环语句。for循环有多种形式：
  **********
  for initialization; condition; post {
    // zero or more statements
  }
  **********
  9. for循环三个部分不需括号包围。大括号强制要求, 左大括号必须和post语句在同一行。
  10. initialization语句是可选的，在循环开始前执行。initalization如果存在，必须是一条简单语句（simple statement），即，短变量声明、自增语句、赋值语句或函数调用。 condition 是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为 true 则执行循环体语句。 post 语句在循环体执行结束后执行，之后再次对 condition 求值。 condition 值为 false 时，循环结束。
  11. for循环的这三个部分每个都可以省略，如果省略 initialization 和 post ，分号也可以省略。
  12. for 循环的另一种形式, 在某种数据类型的区间（range）上遍历。
