\contentsline {chapter}{\numberline {第一章\hspace {.3em}}Iterator模式}{13}{chapter.1}%
\contentsline {section}{\numberline {1.1}概念}{13}{section.1.1}%
\contentsline {section}{\numberline {1.2}模式的结构}{13}{section.1.2}%
\contentsline {section}{\numberline {1.3}模式的实现}{14}{section.1.3}%
\contentsline {subsection}{\numberline {1.3.1}例子一}{14}{subsection.1.3.1}%
\contentsline {subsection}{\numberline {1.3.2}例子二}{17}{subsection.1.3.2}%
\contentsline {subsection}{\numberline {1.3.3}Iterator解析}{19}{subsection.1.3.3}%
\contentsline {subsection}{\numberline {1.3.4}拓展思路}{19}{subsection.1.3.4}%
\contentsline {subsubsection}{不管如何变化，都可以使用Iterator}{19}{subsubsection*.2}%
\contentsline {subsubsection}{难以理解抽象类和接口}{20}{subsubsection*.3}%
\contentsline {subsubsection}{Aggregate和Iterator}{20}{subsubsection*.4}%
\contentsline {subsubsection}{注意}{20}{subsubsection*.5}%
\contentsline {chapter}{\numberline {第二章\hspace {.3em}}Adapter模式}{21}{chapter.2}%
\contentsline {section}{\numberline {2.1}适配器的概念}{21}{section.2.1}%
\contentsline {subsection}{\numberline {2.1.1}分类}{21}{subsection.2.1.1}%
\contentsline {subsection}{\numberline {2.1.2}优点}{21}{subsection.2.1.2}%
\contentsline {subsection}{\numberline {2.1.3}缺点}{21}{subsection.2.1.3}%
\contentsline {section}{\numberline {2.2}模式的结构}{21}{section.2.2}%
\contentsline {subsection}{\numberline {2.2.1}角色}{22}{subsection.2.2.1}%
\contentsline {subsection}{\numberline {2.2.2}应用场景}{22}{subsection.2.2.2}%
\contentsline {subsection}{\numberline {2.2.3}结构图}{22}{subsection.2.2.3}%
\contentsline {section}{\numberline {2.3}实现——例一}{22}{section.2.3}%
\contentsline {subsection}{\numberline {2.3.1}类适配器模式}{22}{subsection.2.3.1}%
\contentsline {subsection}{\numberline {2.3.2}对象适配器模式}{24}{subsection.2.3.2}%
\contentsline {section}{\numberline {2.4}实现——例二}{25}{section.2.4}%
\contentsline {subsection}{\numberline {2.4.1}类适配器模式}{25}{subsection.2.4.1}%
\contentsline {subsection}{\numberline {2.4.2}对象适配器模式}{26}{subsection.2.4.2}%
\contentsline {section}{\numberline {2.5}适配器扩展——双向适配器模式}{27}{section.2.5}%
\contentsline {section}{\numberline {2.6}扩展思路}{29}{section.2.6}%
\contentsline {chapter}{\numberline {第三章\hspace {.3em}}Template Method模式}{31}{chapter.3}%
\contentsline {section}{\numberline {3.1}Template Method模式概念}{31}{section.3.1}%
\contentsline {subsection}{\numberline {3.1.1}Template Method定义}{31}{subsection.3.1.1}%
\contentsline {subsection}{\numberline {3.1.2}优点}{31}{subsection.3.1.2}%
\contentsline {subsection}{\numberline {3.1.3}缺点}{31}{subsection.3.1.3}%
\contentsline {subsection}{\numberline {3.1.4}模式的角色}{31}{subsection.3.1.4}%
\contentsline {subsection}{\numberline {3.1.5}应用场景}{32}{subsection.3.1.5}%
\contentsline {section}{\numberline {3.2}模板方法——例一}{33}{section.3.2}%
\contentsline {section}{\numberline {3.3}模板方法——例二}{35}{section.3.3}%
\contentsline {section}{\numberline {3.4}模板方法扩展——钩子方法}{36}{section.3.4}%
\contentsline {section}{\numberline {3.5}扩展思路}{38}{section.3.5}%
\contentsline {section}{\numberline {3.6}类的层次与抽象类}{39}{section.3.6}%
\contentsline {chapter}{\numberline {第四章\hspace {.3em}}Factory Method模式}{41}{chapter.4}%
\contentsline {section}{\numberline {4.1}工厂方法模式的概念}{41}{section.4.1}%
\contentsline {subsection}{\numberline {4.1.1}优点：}{41}{subsection.4.1.1}%
\contentsline {subsection}{\numberline {4.1.2}缺点：}{41}{subsection.4.1.2}%
\contentsline {section}{\numberline {4.2}模式的结构}{42}{section.4.2}%
\contentsline {subsection}{\numberline {4.2.1}模式的角色}{42}{subsection.4.2.1}%
\contentsline {subsection}{\numberline {4.2.2}应用场景}{42}{subsection.4.2.2}%
\contentsline {subsection}{\numberline {4.2.3}模式结构图}{42}{subsection.4.2.3}%
\contentsline {section}{\numberline {4.3}工厂方法——例一}{42}{section.4.3}%
\contentsline {section}{\numberline {4.4}模式的扩展}{44}{section.4.4}%
\contentsline {section}{\numberline {4.5}生成实例的三种实现方式}{44}{section.4.5}%
\contentsline {section}{\numberline {4.6}相关设计模式}{46}{section.4.6}%
\contentsline {chapter}{\numberline {第五章\hspace {.3em}}Singleton模式}{47}{chapter.5}%
\contentsline {section}{\numberline {5.1}单例模式的概念}{47}{section.5.1}%
\contentsline {subsection}{\numberline {5.1.1}定义}{47}{subsection.5.1.1}%
\contentsline {subsection}{\numberline {5.1.2}特点}{47}{subsection.5.1.2}%
\contentsline {subsection}{\numberline {5.1.3}优点}{47}{subsection.5.1.3}%
\contentsline {subsection}{\numberline {5.1.4}缺点}{47}{subsection.5.1.4}%
\contentsline {subsection}{\numberline {5.1.5}角色}{48}{subsection.5.1.5}%
\contentsline {subsection}{\numberline {5.1.6}应用场景}{48}{subsection.5.1.6}%
\contentsline {subsection}{\numberline {5.1.7}模式框架图}{48}{subsection.5.1.7}%
\contentsline {section}{\numberline {5.2}饿汉模式}{48}{section.5.2}%
\contentsline {section}{\numberline {5.3}多线程懒汉模式}{50}{section.5.3}%
\contentsline {section}{\numberline {5.4}模式扩展——多例模式}{50}{section.5.4}%
\contentsline {section}{\numberline {5.5}不严格的Singleton}{50}{section.5.5}%
\contentsline {chapter}{\numberline {第六章\hspace {.3em}}Prototype模式}{53}{chapter.6}%
\contentsline {section}{\numberline {6.1}Prototype模式的概念}{53}{section.6.1}%
\contentsline {subsection}{\numberline {6.1.1}定义}{53}{subsection.6.1.1}%
\contentsline {subsection}{\numberline {6.1.2}模型分析}{53}{subsection.6.1.2}%
\contentsline {subsection}{\numberline {6.1.3}优点}{53}{subsection.6.1.3}%
\contentsline {subsection}{\numberline {6.1.4}缺点}{54}{subsection.6.1.4}%
\contentsline {section}{\numberline {6.2}Java中的clone方法}{54}{section.6.2}%
\contentsline {subsection}{\numberline {6.2.1}创建对象}{54}{subsection.6.2.1}%
\contentsline {subsection}{\numberline {6.2.2}深拷贝和浅拷贝}{54}{subsection.6.2.2}%
\contentsline {section}{\numberline {6.3}角色}{54}{section.6.3}%
\contentsline {section}{\numberline {6.4}原型模式——例一}{55}{section.6.4}%
\contentsline {section}{\numberline {6.5}原型模式——例二}{58}{section.6.5}%
\contentsline {section}{\numberline {6.6}扩展思路}{59}{section.6.6}%
\contentsline {section}{\numberline {6.7}其他的设计模式}{59}{section.6.7}%
\contentsline {chapter}{\numberline {第七章\hspace {.3em}}Builder模式}{61}{chapter.7}%
\contentsline {section}{\numberline {7.1}Builder模式的定义}{61}{section.7.1}%
\contentsline {subsection}{\numberline {7.1.1}优点}{61}{subsection.7.1.1}%
\contentsline {subsection}{\numberline {7.1.2}缺点}{61}{subsection.7.1.2}%
\contentsline {subsection}{\numberline {7.1.3}应用场景}{61}{subsection.7.1.3}%
\contentsline {subsection}{\numberline {7.1.4}角色}{62}{subsection.7.1.4}%
\contentsline {section}{\numberline {7.2}建造者模式——例一}{62}{section.7.2}%
\contentsline {section}{\numberline {7.3}建造者模式——例二}{66}{section.7.3}%
\contentsline {section}{\numberline {7.4}相关设计模式}{68}{section.7.4}%
\contentsline {section}{\numberline {7.5}扩展思路}{69}{section.7.5}%
\contentsline {chapter}{\numberline {第八章\hspace {.3em}}Abstract Factory模式}{71}{chapter.8}%
\contentsline {section}{\numberline {8.1}抽象工厂模式的概念}{71}{section.8.1}%
\contentsline {subsection}{\numberline {8.1.1}应用条件}{71}{subsection.8.1.1}%
\contentsline {subsection}{\numberline {8.1.2}优点}{71}{subsection.8.1.2}%
\contentsline {subsection}{\numberline {8.1.3}缺点}{72}{subsection.8.1.3}%
\contentsline {section}{\numberline {8.2}抽象工厂的角色}{72}{section.8.2}%
\contentsline {section}{\numberline {8.3}抽象工厂的结构}{72}{section.8.3}%
\contentsline {section}{\numberline {8.4}抽象工厂实现——例一}{72}{section.8.4}%
\contentsline {section}{\numberline {8.5}抽象工厂实现——例二}{74}{section.8.5}%
\contentsline {subsection}{\numberline {8.5.1}factory}{74}{subsection.8.5.1}%
\contentsline {subsection}{\numberline {8.5.2}Main}{76}{subsection.8.5.2}%
\contentsline {subsection}{\numberline {8.5.3}listfactory}{77}{subsection.8.5.3}%
\contentsline {subsection}{\numberline {8.5.4}tablefactory}{79}{subsection.8.5.4}%
\contentsline {section}{\numberline {8.6}扩展思路}{81}{section.8.6}%
\contentsline {section}{\numberline {8.7}相关模式}{81}{section.8.7}%
\contentsline {section}{\numberline {8.8}生成实例的方法}{82}{section.8.8}%
\contentsline {subsection}{\numberline {8.8.1}new}{82}{subsection.8.8.1}%
\contentsline {subsection}{\numberline {8.8.2}clone}{82}{subsection.8.8.2}%
\contentsline {subsection}{\numberline {8.8.3}newInstance}{82}{subsection.8.8.3}%
\contentsline {chapter}{\numberline {第九章\hspace {.3em}}Bridge模式}{85}{chapter.9}%
\contentsline {section}{\numberline {9.1}Bridge模式的概念}{85}{section.9.1}%
\contentsline {subsection}{\numberline {9.1.1}Bridge定义}{85}{subsection.9.1.1}%
\contentsline {subsection}{\numberline {9.1.2}类的层次结构}{85}{subsection.9.1.2}%
\contentsline {subsection}{\numberline {9.1.3}优点}{85}{subsection.9.1.3}%
\contentsline {subsection}{\numberline {9.1.4}缺点}{85}{subsection.9.1.4}%
\contentsline {subsection}{\numberline {9.1.5}应用场景}{86}{subsection.9.1.5}%
\contentsline {subsection}{\numberline {9.1.6}模式的角色}{86}{subsection.9.1.6}%
\contentsline {subsubsection}{Abstraction抽象化}{86}{subsubsection*.6}%
\contentsline {subsubsection}{RefinedAbstraction改善后抽象化}{86}{subsubsection*.7}%
\contentsline {subsubsection}{Implementor实现者}{86}{subsubsection*.8}%
\contentsline {subsubsection}{ConcreteImplementor具体实现者}{86}{subsubsection*.9}%
\contentsline {section}{\numberline {9.2}Bridge实现——例一}{86}{section.9.2}%
\contentsline {section}{\numberline {9.3}Bridge实现——例二}{89}{section.9.3}%
\contentsline {section}{\numberline {9.4}Bridge模式的扩展}{90}{section.9.4}%
\contentsline {section}{\numberline {9.5}扩展思路}{91}{section.9.5}%
\contentsline {section}{\numberline {9.6}相关设计模式}{91}{section.9.6}%
\contentsline {chapter}{\numberline {第十章\hspace {.3em}}Strategy模式}{93}{chapter.10}%
\contentsline {section}{\numberline {10.1}策略模式的概念}{93}{section.10.1}%
\contentsline {subsection}{\numberline {10.1.1}策略模式的定义}{93}{subsection.10.1.1}%
\contentsline {subsection}{\numberline {10.1.2}优点}{93}{subsection.10.1.2}%
\contentsline {subsection}{\numberline {10.1.3}缺点}{93}{subsection.10.1.3}%
\contentsline {subsection}{\numberline {10.1.4}应用场景}{94}{subsection.10.1.4}%
\contentsline {subsection}{\numberline {10.1.5}角色}{94}{subsection.10.1.5}%
\contentsline {section}{\numberline {10.2}策略模式实现——例一}{94}{section.10.2}%
\contentsline {section}{\numberline {10.3}策略模式实现——例二}{100}{section.10.3}%
\contentsline {section}{\numberline {10.4}策略模式扩展}{102}{section.10.4}%
\contentsline {section}{\numberline {10.5}扩展思路}{103}{section.10.5}%
\contentsline {section}{\numberline {10.6}相关模式}{103}{section.10.6}%
\contentsline {chapter}{\numberline {第十一章\hspace {.3em}}Composite模式}{105}{chapter.11}%
\contentsline {section}{\numberline {11.1}组合模式的概念}{105}{section.11.1}%
\contentsline {subsection}{\numberline {11.1.1}定义}{105}{subsection.11.1.1}%
\contentsline {subsection}{\numberline {11.1.2}优点}{105}{subsection.11.1.2}%
\contentsline {subsection}{\numberline {11.1.3}缺点}{105}{subsection.11.1.3}%
\contentsline {subsection}{\numberline {11.1.4}模式的角色}{105}{subsection.11.1.4}%
\contentsline {subsection}{\numberline {11.1.5}模式的分类}{106}{subsection.11.1.5}%
\contentsline {subsubsection}{透明方式}{106}{subsubsection*.10}%
\contentsline {subsubsection}{安全方式}{106}{subsubsection*.11}%
\contentsline {subsection}{\numberline {11.1.6}应用场景}{106}{subsection.11.1.6}%
\contentsline {section}{\numberline {11.2}组合模式实现——例一}{107}{section.11.2}%
\contentsline {section}{\numberline {11.3}组合模式实现——例二}{112}{section.11.3}%
\contentsline {section}{\numberline {11.4}模式的扩展}{114}{section.11.4}%
\contentsline {section}{\numberline {11.5}扩展思路}{114}{section.11.5}%
\contentsline {section}{\numberline {11.6}相关设计模式}{115}{section.11.6}%
\contentsline {chapter}{\numberline {第十二章\hspace {.3em}}Decorator模式}{117}{chapter.12}%
\contentsline {section}{\numberline {12.1}Decorator模式的概念}{117}{section.12.1}%
\contentsline {subsection}{\numberline {12.1.1}定义}{117}{subsection.12.1.1}%
\contentsline {subsection}{\numberline {12.1.2}优点}{117}{subsection.12.1.2}%
\contentsline {subsection}{\numberline {12.1.3}缺点}{117}{subsection.12.1.3}%
\contentsline {subsection}{\numberline {12.1.4}装饰模式的角色}{117}{subsection.12.1.4}%
\contentsline {subsection}{\numberline {12.1.5}应用场景}{118}{subsection.12.1.5}%
\contentsline {section}{\numberline {12.2}装饰模式的实现——例一}{119}{section.12.2}%
\contentsline {section}{\numberline {12.3}装饰模式实现——例二}{123}{section.12.3}%
\contentsline {section}{\numberline {12.4}模式的扩展}{125}{section.12.4}%
\contentsline {section}{\numberline {12.5}扩展思路}{126}{section.12.5}%
\contentsline {section}{\numberline {12.6}相关设计模式}{126}{section.12.6}%
\contentsline {section}{\numberline {12.7}延伸——继承和委托中的一致性}{126}{section.12.7}%
\contentsline {subsection}{\numberline {12.7.1}继承——父类和子类的一致性}{126}{subsection.12.7.1}%
\contentsline {subsection}{\numberline {12.7.2}委托——自已和被委托对象的一致性}{126}{subsection.12.7.2}%
\contentsline {chapter}{\numberline {第十三章\hspace {.3em}}Visitor模式}{129}{chapter.13}%
\contentsline {section}{\numberline {13.1}访问者模式的概念}{129}{section.13.1}%
\contentsline {subsection}{\numberline {13.1.1}定义}{129}{subsection.13.1.1}%
\contentsline {subsection}{\numberline {13.1.2}优点}{129}{subsection.13.1.2}%
\contentsline {subsection}{\numberline {13.1.3}缺点}{129}{subsection.13.1.3}%
\contentsline {subsection}{\numberline {13.1.4}模式的角色}{130}{subsection.13.1.4}%
\contentsline {section}{\numberline {13.2}访问者模式实现——例一}{130}{section.13.2}%
\contentsline {section}{\numberline {13.3}访问者模式实现——例二}{135}{section.13.3}%
\contentsline {section}{\numberline {13.4}扩展思路}{138}{section.13.4}%
\contentsline {section}{\numberline {13.5}相关设计模式}{139}{section.13.5}%
\contentsline {chapter}{\numberline {第十四章\hspace {.3em}}Chain Of Responsibility模式}{141}{chapter.14}%
\contentsline {section}{\numberline {14.1}责任链模式的概念}{141}{section.14.1}%
\contentsline {subsection}{\numberline {14.1.1}定义}{141}{subsection.14.1.1}%
\contentsline {subsection}{\numberline {14.1.2}优点}{141}{subsection.14.1.2}%
\contentsline {subsection}{\numberline {14.1.3}缺点}{141}{subsection.14.1.3}%
\contentsline {subsection}{\numberline {14.1.4}责任链模式的角色}{142}{subsection.14.1.4}%
\contentsline {subsection}{\numberline {14.1.5}应用场景}{142}{subsection.14.1.5}%
\contentsline {section}{\numberline {14.2}责任链模式实现——例一}{142}{section.14.2}%
\contentsline {section}{\numberline {14.3}责任链模式实现——例二}{146}{section.14.3}%
\contentsline {section}{\numberline {14.4}模式扩展}{149}{section.14.4}%
\contentsline {section}{\numberline {14.5}思路扩展}{149}{section.14.5}%
\contentsline {section}{\numberline {14.6}相关设计模式}{149}{section.14.6}%
\contentsline {chapter}{\numberline {第十五章\hspace {.3em}}Facade模式}{151}{chapter.15}%
\contentsline {section}{\numberline {15.1}Facade模式的概念}{151}{section.15.1}%
\contentsline {subsection}{\numberline {15.1.1}外观模式的定义}{151}{subsection.15.1.1}%
\contentsline {subsection}{\numberline {15.1.2}特点}{151}{subsection.15.1.2}%
\contentsline {subsection}{\numberline {15.1.3}缺点}{151}{subsection.15.1.3}%
\contentsline {subsection}{\numberline {15.1.4}应用场景}{151}{subsection.15.1.4}%
\contentsline {subsection}{\numberline {15.1.5}外观模式的角色}{152}{subsection.15.1.5}%
\contentsline {section}{\numberline {15.2}外观模式实现——例一}{152}{section.15.2}%
\contentsline {section}{\numberline {15.3}外观模式实现——例二}{155}{section.15.3}%
\contentsline {section}{\numberline {15.4}扩展模式}{157}{section.15.4}%
\contentsline {section}{\numberline {15.5}扩展思路}{157}{section.15.5}%
\contentsline {section}{\numberline {15.6}相关设计模式}{157}{section.15.6}%
\contentsline {chapter}{\numberline {第十六章\hspace {.3em}}Mediator模式}{159}{chapter.16}%
\contentsline {section}{\numberline {16.1}Mediator模式的概念}{159}{section.16.1}%
\contentsline {subsection}{\numberline {16.1.1}定义}{159}{subsection.16.1.1}%
\contentsline {subsection}{\numberline {16.1.2}优点}{159}{subsection.16.1.2}%
\contentsline {subsection}{\numberline {16.1.3}缺点}{159}{subsection.16.1.3}%
\contentsline {subsection}{\numberline {16.1.4}应用场景}{159}{subsection.16.1.4}%
\contentsline {subsection}{\numberline {16.1.5}中介者模式的角色}{159}{subsection.16.1.5}%
\contentsline {section}{\numberline {16.2}中介者模式实现——例一}{160}{section.16.2}%
\contentsline {section}{\numberline {16.3}中介者模式实现——例二}{165}{section.16.3}%
\contentsline {section}{\numberline {16.4}模式扩展}{168}{section.16.4}%
\contentsline {section}{\numberline {16.5}扩展思路}{171}{section.16.5}%
\contentsline {section}{\numberline {16.6}相关设计模式}{171}{section.16.6}%
\contentsline {chapter}{\numberline {第十七章\hspace {.3em}}Observer模式}{173}{chapter.17}%
\contentsline {section}{\numberline {17.1}Observer模式的概念}{173}{section.17.1}%
\contentsline {subsection}{\numberline {17.1.1}定义}{173}{subsection.17.1.1}%
\contentsline {subsection}{\numberline {17.1.2}优点}{173}{subsection.17.1.2}%
\contentsline {subsection}{\numberline {17.1.3}缺点}{173}{subsection.17.1.3}%
\contentsline {subsection}{\numberline {17.1.4}观察者模式的角色}{173}{subsection.17.1.4}%
\contentsline {subsection}{\numberline {17.1.5}应用场景}{174}{subsection.17.1.5}%
\contentsline {section}{\numberline {17.2}观察者模式实现——例一}{174}{section.17.2}%
\contentsline {section}{\numberline {17.3}观察者模式实现——例二}{177}{section.17.3}%
\contentsline {section}{\numberline {17.4}模式扩展——java.util.Observer}{179}{section.17.4}%
\contentsline {subsection}{\numberline {17.4.1}Observable类}{179}{subsection.17.4.1}%
\contentsline {subsection}{\numberline {17.4.2}Observer接口}{179}{subsection.17.4.2}%
\contentsline {subsection}{\numberline {17.4.3}实现原油期货例子}{180}{subsection.17.4.3}%
\contentsline {section}{\numberline {17.5}思路扩展}{182}{section.17.5}%
\contentsline {section}{\numberline {17.6}相关设计模式}{182}{section.17.6}%
\contentsline {chapter}{\numberline {第十八章\hspace {.3em}}Memento模式}{183}{chapter.18}%
\contentsline {section}{\numberline {18.1}Memento模式的概念}{183}{section.18.1}%
\contentsline {subsection}{\numberline {18.1.1}定义}{183}{subsection.18.1.1}%
\contentsline {subsection}{\numberline {18.1.2}优点}{183}{subsection.18.1.2}%
\contentsline {subsection}{\numberline {18.1.3}缺点}{183}{subsection.18.1.3}%
\contentsline {subsection}{\numberline {18.1.4}备忘录模式的角色}{183}{subsection.18.1.4}%
\contentsline {subsection}{\numberline {18.1.5}应用场景}{184}{subsection.18.1.5}%
\contentsline {section}{\numberline {18.2}备忘录模式实现——例一}{184}{section.18.2}%
\contentsline {section}{\numberline {18.3}备忘录模式实现——例二}{188}{section.18.3}%
\contentsline {section}{\numberline {18.4}模式扩展}{190}{section.18.4}%
\contentsline {section}{\numberline {18.5}扩展思路}{192}{section.18.5}%
\contentsline {section}{\numberline {18.6}相关设计模式}{193}{section.18.6}%
\contentsline {chapter}{\numberline {第十九章\hspace {.3em}}State模式}{195}{chapter.19}%
\contentsline {section}{\numberline {19.1}状态模式的概念}{195}{section.19.1}%
\contentsline {subsection}{\numberline {19.1.1}定义}{195}{subsection.19.1.1}%
\contentsline {subsection}{\numberline {19.1.2}优点}{195}{subsection.19.1.2}%
\contentsline {subsection}{\numberline {19.1.3}缺点}{195}{subsection.19.1.3}%
\contentsline {subsection}{\numberline {19.1.4}状态模式的角色}{196}{subsection.19.1.4}%
\contentsline {subsection}{\numberline {19.1.5}应用场景}{196}{subsection.19.1.5}%
\contentsline {section}{\numberline {19.2}状态模式实现——例一}{196}{section.19.2}%
\contentsline {section}{\numberline {19.3}状态模式实现——例二}{201}{section.19.3}%
\contentsline {section}{\numberline {19.4}模式扩展}{204}{section.19.4}%
\contentsline {section}{\numberline {19.5}扩展思路}{206}{section.19.5}%
\contentsline {section}{\numberline {19.6}相关设计模式}{206}{section.19.6}%
\contentsline {chapter}{\numberline {第二十章\hspace {.3em}}Flyweight模式}{207}{chapter.20}%
\contentsline {section}{\numberline {20.1}享元模式的概念}{207}{section.20.1}%
\contentsline {subsection}{\numberline {20.1.1}定义}{207}{subsection.20.1.1}%
\contentsline {subsection}{\numberline {20.1.2}优点}{207}{subsection.20.1.2}%
\contentsline {subsection}{\numberline {20.1.3}缺点}{207}{subsection.20.1.3}%
\contentsline {subsection}{\numberline {20.1.4}享元模式的角色}{207}{subsection.20.1.4}%
\contentsline {subsection}{\numberline {20.1.5}应用场景}{208}{subsection.20.1.5}%
\contentsline {section}{\numberline {20.2}享元模式实现——例一}{208}{section.20.2}%
\contentsline {section}{\numberline {20.3}享元模式实现——例二}{211}{section.20.3}%
\contentsline {section}{\numberline {20.4}模式扩展}{214}{section.20.4}%
\contentsline {subsection}{\numberline {20.4.1}单纯享元模式}{214}{subsection.20.4.1}%
\contentsline {subsection}{\numberline {20.4.2}复合享元模式}{214}{subsection.20.4.2}%
\contentsline {section}{\numberline {20.5}思路扩展}{216}{section.20.5}%
\contentsline {section}{\numberline {20.6}相关设计模式}{216}{section.20.6}%
\contentsline {section}{\numberline {20.7}思考}{216}{section.20.7}%
\contentsline {chapter}{\numberline {第二十一章\hspace {.3em}}Proxy模式}{217}{chapter.21}%
\contentsline {section}{\numberline {21.1}代理模式的概念}{217}{section.21.1}%
\contentsline {subsection}{\numberline {21.1.1}定义}{217}{subsection.21.1.1}%
\contentsline {subsection}{\numberline {21.1.2}优点}{217}{subsection.21.1.2}%
\contentsline {subsection}{\numberline {21.1.3}缺点}{217}{subsection.21.1.3}%
\contentsline {subsection}{\numberline {21.1.4}代理模式的角色}{217}{subsection.21.1.4}%
\contentsline {subsection}{\numberline {21.1.5}应用场景}{218}{subsection.21.1.5}%
\contentsline {section}{\numberline {21.2}代理模式实现——例一}{218}{section.21.2}%
\contentsline {section}{\numberline {21.3}代理模式实现——例二}{222}{section.21.3}%
\contentsline {section}{\numberline {21.4}模式扩展}{223}{section.21.4}%
\contentsline {section}{\numberline {21.5}思路扩展}{224}{section.21.5}%
\contentsline {section}{\numberline {21.6}各种Proxy模式}{225}{section.21.6}%
\contentsline {section}{\numberline {21.7}相关设计模式}{225}{section.21.7}%
\contentsline {chapter}{\numberline {第二十二章\hspace {.3em}}Command模式}{227}{chapter.22}%
\contentsline {section}{\numberline {22.1}命令模式的概念}{227}{section.22.1}%
\contentsline {subsection}{\numberline {22.1.1}定义}{227}{subsection.22.1.1}%
\contentsline {subsection}{\numberline {22.1.2}优点}{227}{subsection.22.1.2}%
\contentsline {subsection}{\numberline {22.1.3}缺点}{227}{subsection.22.1.3}%
\contentsline {subsection}{\numberline {22.1.4}命令模式的角色}{227}{subsection.22.1.4}%
\contentsline {subsection}{\numberline {22.1.5}应用场景}{228}{subsection.22.1.5}%
\contentsline {section}{\numberline {22.2}命令模式实现——例一}{228}{section.22.2}%
\contentsline {section}{\numberline {22.3}命令模式实现——例二}{233}{section.22.3}%
\contentsline {section}{\numberline {22.4}模式扩展}{235}{section.22.4}%
\contentsline {section}{\numberline {22.5}思路扩展}{238}{section.22.5}%
\contentsline {section}{\numberline {22.6}相关设计模式}{239}{section.22.6}%
\contentsline {chapter}{\numberline {第二十三章\hspace {.3em}}Interpreter模式}{241}{chapter.23}%
\contentsline {section}{\numberline {23.1}解释器模式的概念}{241}{section.23.1}%
\contentsline {section}{\numberline {23.2}定义}{241}{section.23.2}%
\contentsline {section}{\numberline {23.3}优点}{241}{section.23.3}%
\contentsline {section}{\numberline {23.4}缺点}{241}{section.23.4}%
\contentsline {section}{\numberline {23.5}解释器模式的角色}{241}{section.23.5}%
\contentsline {section}{\numberline {23.6}应用场景}{242}{section.23.6}%
\contentsline {section}{\numberline {23.7}解释器模式实现——例一}{242}{section.23.7}%
\contentsline {section}{\numberline {23.8}解释器模式实现——例二}{249}{section.23.8}%
\contentsline {section}{\numberline {23.9}模式扩展}{250}{section.23.9}%
\contentsline {section}{\numberline {23.10}扩展思路}{251}{section.23.10}%
\contentsline {section}{\numberline {23.11}相关设计模式}{251}{section.23.11}%
